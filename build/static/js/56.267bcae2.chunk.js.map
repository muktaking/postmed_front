{"version":3,"sources":["container/courses/courseDetails.js"],"names":["duration","require","relativeTime","moment","styles","position","top","right","zIndex","CourseDetails","useState","course","setCourse","res","setRes","id","useParams","isAuthenticated","useSelector","state","auth","token","useEffect","axios","get","process","then","data","console","log","catch","e","show","onClose","style","Header","className","src","alt","Body","minWidth","Img","variant","imageUrl","width","Title","fontSize","fontWeight","title","Text","remarkPlugins","remarkGfm","description","size","price","endDate","diff","startDate","humanize","to","height","onClick","baseURL","url","method","response","message","error","fromNow","Footer"],"mappings":"qUAcMA,G,OAAWC,EAAQ,MACnBC,EAAeD,EAAQ,KAC7BE,SAAcD,GACdC,SAAcH,GAEd,IAAMI,EAAS,CACbC,SAAU,QACVC,IAAK,OACLC,MAAO,OACPC,OAAQ,KAGK,SAASC,IAAiB,IAAD,EACVC,mBAAS,MADC,mBAC/BC,EAD+B,KACvBC,EADuB,OAEhBF,mBAAS,MAFO,mBAE/BG,EAF+B,KAE1BC,EAF0B,KAGhCC,EAAOC,cAAPD,GACAE,EAAkBC,aAAY,SAACC,GAAD,OAAgC,OAArBA,EAAMC,KAAKC,SAE1DC,qBAAU,WACRC,IACGC,IAAIC,0CAA+CV,GACnDW,MAAK,SAACb,GACLD,EAAUC,EAAIc,MACdC,QAAQC,IAAIhB,EAAIc,SAEjBG,OAAM,SAACC,GAAD,OAAOH,QAAQC,IAAIE,QAC3B,IAMH,OACE,oCACE,kBAAC,IAAD,CAAOC,KAAMnB,EAAKoB,QANF,WAClBnB,EAAO,OAKmCoB,MAAO9B,GAC7C,kBAAC,IAAM+B,OAAP,CAAcC,UAAU,yBACtB,yBAAKC,IAAI,2BAA2BD,UAAU,eAAeE,IAAI,KACjE,4BAAQF,UAAU,WAAlB,oBAEF,kBAAC,IAAMG,KAAP,KAAa1B,IAEf,yBAAKuB,UAAU,2CACZzB,GACC,kBAAC,IAAD,CAAMyB,UAAU,YAAYF,MAAO,CAAEM,SAAU,UAC7C,kBAAC,oBAAD,KACE,kBAAC,IAAKC,IAAN,CACEC,QAAQ,MACRL,IACE1B,EAAOgC,SAAP,UACOlB,iCADP,YACyCd,EAAOgC,UADhD,UAEOlB,iCAFP,6BAIFW,UAAU,UACVF,MAAO,CAAEU,MAAO,YAGpB,kBAAC,IAAKL,KAAN,KACE,kBAAC,IAAKM,MAAN,CACET,UAAU,cACVF,MAAO,CAAEY,SAAU,SAAUC,WAAY,QAExCpC,EAAOqC,OAGV,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAeC,cAAe,CAACC,MAC5BxC,EAAOyC,cAGZ,kBAAC,IAAKH,KAAN,CAAWb,UAAU,kCACnB,6BACE,kBAAC,IAAD,CAAiBiB,KAAK,WAAY,IAClC,0BAAMjB,UAAU,gCACbzB,EAAO2C,MAAQ3C,EAAO2C,MAAQ,QAAU,SAI7C,6BACE,kBAAC,IAAD,CAAeD,KAAK,WAAY,IAChC,0BAAMjB,UAAU,qCACbjC,WACWA,EAAOQ,EAAO4C,SAASC,KAAK7C,EAAO8C,YAC5CC,cAKRzC,GACC,kBAAC,IAAKgC,KAAN,CAAWb,UAAU,oBACnB,kBAAC,OAAD,CAAMuB,GAAI,kBAAoBhD,EAAOI,IACnC,kBAAC,IAAD,CAAQ2B,QAAQ,WAAhB,iBAIN,6BACA,yBAAKN,UAAU,oDACZnB,EACC,kBAAC,IAAD,CACEyB,QAAQ,UAGRR,MAAO,CAAEU,MAAO,QAASgB,OAAQ,OAAQd,SAAU,QACnDe,QAAS,WAEPtC,IAAM,CACJuC,QAASrC,iCACTsC,IAAK,mBAAqBpD,EAAOI,GACjCiD,OAAQ,UAEPtC,MAAK,SAACuC,GACLnD,EAAOmD,EAAStC,KAAKuC,YAEtBpC,OAAM,SAACqC,GACNrD,EACE,yGAjBV,UAyBA,kBAAC,OAAD,CAAM6C,GAAI,UACR,kBAAC,IAAD,CAAOjB,QAAQ,UAAUN,UAAU,OAAnC,6BAMN,6BACA,kBAAC,IAAKa,KAAN,CAAWb,UAAU,0BACnB,wCAAcjC,EAAOQ,EAAO8C,WAAWW,aAG3C,kBAAC,IAAKC,OAAN,KACE,kBAAC,IAAD,CACErB,MAAOrC,EAAOqC,MACdI,YAAazC,EAAOyC,YACpBW,IAAI","file":"static/js/56.267bcae2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport * as moment from 'dayjs'\r\nimport { useParams } from 'react-router'\r\nimport { Badge, Button, Card, Modal, Spinner, Toast } from 'react-bootstrap'\r\nimport { FaCalendarAlt, FaMoneyCheckAlt } from 'react-icons/fa'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { Link } from 'react-router-dom'\r\nimport remarkGfm from 'remark-gfm'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport SocialShare from '../../components/socialShare/socialShare'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nconst styles = {\r\n  position: 'fixed',\r\n  top: '70px',\r\n  right: '10px',\r\n  zIndex: 100\r\n}\r\n\r\nexport default function CourseDetails() {\r\n  const [course, setCourse] = useState(null)\r\n  const [res, setRes] = useState(null)\r\n  let { id } = useParams()\r\n  const isAuthenticated = useSelector((state) => state.auth.token !== null)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/courses/' + id)\r\n      .then((res) => {\r\n        setCourse(res.data)\r\n        console.log(res.data)\r\n      })\r\n      .catch((e) => console.log(e))\r\n  }, [])\r\n\r\n  const handleClose = () => {\r\n    setRes(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Toast show={res} onClose={handleClose} style={styles}>\r\n        <Toast.Header className='bg-warning text-white'>\r\n          <img src='holder.js/20x20?text=%20' className='rounded me-2' alt='' />\r\n          <strong className='me-auto'>Server Response</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>{res}</Toast.Body>\r\n      </Toast>\r\n      <div className='d-flex justify-content-around flex-wrap'>\r\n        {course && (\r\n          <Card className='my-3 pt-3' style={{ minWidth: '350px' }}>\r\n            <LazyLoadComponent>\r\n              <Card.Img\r\n                variant='top'\r\n                src={\r\n                  course.imageUrl\r\n                    ? `${process.env.REACT_APP_SITE_URL}/${course.imageUrl}`\r\n                    : `${process.env.REACT_APP_SITE_URL}/images/courses/index.png`\r\n                }\r\n                className='mx-auto'\r\n                style={{ width: '350px' }}\r\n              />\r\n            </LazyLoadComponent>\r\n            <Card.Body>\r\n              <Card.Title\r\n                className='text-center'\r\n                style={{ fontSize: '1.4rem', fontWeight: '900' }}\r\n              >\r\n                {course.title}\r\n              </Card.Title>\r\n\r\n              <Card.Text>\r\n                <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n                  {course.description}\r\n                </ReactMarkdown>\r\n              </Card.Text>\r\n              <Card.Text className='d-flex justify-content-between'>\r\n                <div>\r\n                  <FaMoneyCheckAlt size='1.5rem' />{' '}\r\n                  <span className='bg-info text-white px-3 py-1'>\r\n                    {course.price ? course.price + ' Taka' : 'Free'}\r\n                  </span>\r\n                  {/* <span>Price</span> */}\r\n                </div>\r\n                <div>\r\n                  <FaCalendarAlt size='1.5rem' />{' '}\r\n                  <span className='bg-secondary text-white px-3 py-1'>\r\n                    {moment\r\n                      .duration(moment(course.endDate).diff(course.startDate))\r\n                      .humanize()}\r\n                  </span>\r\n                  {/* <span>Duration</span> */}\r\n                </div>\r\n              </Card.Text>\r\n              {isAuthenticated && (\r\n                <Card.Text className='text-center mt-2'>\r\n                  <Link to={'/exams/courses/' + course.id}>\r\n                    <Button variant='primary'>Go to Exams</Button>\r\n                  </Link>\r\n                </Card.Text>\r\n              )}\r\n              <hr />\r\n              <div className='d-flex justify-content-center align-items-center'>\r\n                {isAuthenticated ? (\r\n                  <Button\r\n                    variant='primary'\r\n                    //size='lg'\r\n                    //className='px-5'\r\n                    style={{ width: '300px', height: '55px', fontSize: '18px' }}\r\n                    onClick={() => {\r\n                      //setAuthorizationToken(token);\r\n                      axios({\r\n                        baseURL: process.env.REACT_APP_SITE_URL,\r\n                        url: '/courses/enroll/' + course.id,\r\n                        method: 'patch'\r\n                      })\r\n                        .then((response) => {\r\n                          setRes(response.data.message)\r\n                        })\r\n                        .catch((error) => {\r\n                          setRes(\r\n                            'Sorry. Enrollment to this course is not possible due to server error. Please contact with admin.'\r\n                          )\r\n                        })\r\n                    }}\r\n                  >\r\n                    Enroll\r\n                  </Button>\r\n                ) : (\r\n                  <Link to={'/login'}>\r\n                    <Badge variant='warning' className='p-2'>\r\n                      Please Login to Enroll.\r\n                    </Badge>\r\n                  </Link>\r\n                )}\r\n              </div>\r\n              <hr />\r\n              <Card.Text className='text-muted text-center'>\r\n                <span>Start: {moment(course.startDate).fromNow()}</span>\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <SocialShare\r\n                title={course.title}\r\n                description={course.description}\r\n                url=''\r\n              />\r\n            </Card.Footer>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}