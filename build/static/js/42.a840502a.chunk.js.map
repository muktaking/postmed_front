{"version":3,"sources":["components/shared/spinner/spinner.js","utils/paginate.js","components/exams/gallary/examCatBadges.js","container/exams/component/examByCat.js","container/exams/component/examFilter.js","container/exams/component/latest.js","container/exams/examListsByCourseShower.js"],"names":["contentCenter","position","top","left","zIndex","SpinnerCustom","animation","role","variant","style","paginate","items","pageNumber","pageSize","startIndex","_","slice","take","value","ExamCatBadges","categoryType","map","category","key","name","pill","categoryTypeVariant","className","duration","require","relativeTime","ExamByCat","exam","courseId","dispatch","useDispatch","authToken","useSelector","state","auth","token","sm","title","filter","ct","examTypeToString","type","size","description","to","cat","length","id","onClick","resetExamResultLoader","defaultMessage","moment","startDate","fromNow","ExamFilter","setExams","setCurrentPage","examTypes","initialValues","text","onSubmit","values","setSubmitting","rest","examType","Object","e","eT","axios","post","process","then","response","data","catch","console","log","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","Form","Group","controlId","Label","Control","placeholder","onChange","onBlur","ind","Check","label","Button","Latest","useState","setExam","useEffect","get","res","Row","width","ExamListsByCatShower","useParams","exams","loading","setLoading","currentPage","paginatedExams","Col","lg","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","page","itemClass","linkClass","prevPageText","nextPageText"],"mappings":"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","file":"static/js/42.a840502a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst contentCenter = {\r\n  //styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '45vh',\r\n  left: '50%',\r\n  zIndex: '10000000000'\r\n}\r\n\r\nexport default function SpinnerCustom() {\r\n  return (\r\n    <Spinner\r\n      animation='grow'\r\n      role='status'\r\n      variant='dark'\r\n      style={contentCenter}\r\n    ></Spinner>\r\n  )\r\n}\r\n","import _ from 'lodash'\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize\r\n  return _(items).slice(startIndex).take(pageSize).value()\r\n}\r\n","import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\n\r\nexport default function ExamCatBadges({ categoryType }) {\r\n  return (\r\n    categoryType &&\r\n    categoryType.map((category) => (\r\n      <Badge\r\n        key={category.name}\r\n        pill\r\n        variant={categoryTypeVariant(category.name)}\r\n        className='mr-1'\r\n      >\r\n        {category.name}\r\n      </Badge>\r\n    ))\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n","//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React from 'react'\r\nimport { Badge, Button, Col } from 'react-bootstrap'\r\nimport { BsFileText } from 'react-icons/bs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport ExamCatBadges from '../../../components/exams/gallary/examCatBadges'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { examTypeToString } from '../../../utils/faculty'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nexport default function ExamByCat({ exam, courseId = null }) {\r\n  const dispatch = useDispatch()\r\n  const authToken = useSelector((state) => (state.auth.token ? true : false))\r\n  return (\r\n    <>\r\n      <Col sm={12}>\r\n        <h4 className=''>\r\n          {/* <BsLayersFill size='1.5rem' /> */}\r\n          <span className=''>{exam.title}</span>\r\n        </h4>\r\n        <div className='d-flex justify-content-between'>\r\n          <div>\r\n            <ExamCatBadges\r\n              categoryType={exam.categoryType.filter(\r\n                (ct) => ct.name !== 'Free'\r\n              )}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Badge variant='dark' className='px-2 py-1'>\r\n              {examTypeToString(exam.type)}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </Col>\r\n      <Col sm={12} className='mt-1'>\r\n        <p className=''>\r\n          <BsFileText size='1.5rem' className='m-1' />\r\n          <span className='ml-2'>{exam.description}</span>\r\n        </p>\r\n        {/* <p className='text-right'>\r\n          End on:{' '}\r\n          <Badge className='ml-2' variant='danger'>\r\n            {moment(exam.endDate).format('DD-MMM-YYYY hh:mm A')}\r\n          </Badge>\r\n        </p> */}\r\n        {/* <Badge variant='light' className='mt-3'>\r\n          {!authToken &&\r\n            exam.categoryType.filter((cat) => cat.name === 'Free').length > 0 &&\r\n            'Free'}\r\n        </Badge> */}\r\n        <hr />\r\n        <div className='d-flex justify-content-center'>\r\n          <Link\r\n            className='text-white'\r\n            to={\r\n              (!authToken &&\r\n              exam.categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n                ? '/exams/free/'\r\n                : '/exams/') + (courseId ? exam.id + '_' + courseId : exam.id)\r\n            }\r\n          >\r\n            <Button\r\n              variant='outline-primary'\r\n              onClick={() => {\r\n                dispatch(resetExamResultLoader())\r\n              }}\r\n            >\r\n              <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n            </Button>\r\n          </Link>\r\n          {courseId && (\r\n            <Link\r\n              className='text-white'\r\n              to={'/result/rank/' + (courseId + '_' + exam.id)}\r\n            >\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-primary'\r\n                className='ml-2'\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link>\r\n          )}\r\n        </div>\r\n        <hr />\r\n        <p className='text-center text-muted'>\r\n          Start: {moment(exam.startDate).fromNow()}\r\n        </p>\r\n      </Col>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport { Formik } from 'formik'\r\nimport React from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\n\r\nexport default function ExamFilter({ setExams, id, setCurrentPage }) {\r\n  const examTypes = [\r\n    { name: 'Assignment', value: 0 },\r\n    { name: 'Weekly', value: 1 },\r\n    { name: 'Monthly', value: 2 },\r\n    { name: 'Assesment', value: 3 },\r\n    { name: 'Term', value: 4 },\r\n    { name: 'Test', value: 5 },\r\n    { name: 'Final', value: 6 }\r\n  ]\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ text: '' }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          const { text, ...rest } = values\r\n          let examType = Object.values(rest).map((e) => e[0])\r\n          //discarding all null values\r\n          examType = examType.filter((eT) => eT)\r\n          if (examType.length < 1) {\r\n            examType = ['0', '1', '2', '3', '4', '5', '6']\r\n          }\r\n\r\n          axios\r\n            .post(process.env.REACT_APP_SITE_URL + '/exams/course/' + id, {\r\n              text,\r\n              examType\r\n            })\r\n            .then((response) => {\r\n              //setLoading(false)\r\n              setExams(response.data)\r\n              setCurrentPage(1)\r\n            })\r\n            .catch((e) => {\r\n              //setLoading(false)\r\n              console.log(e)\r\n            })\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting\r\n          /* and other goodies */\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group className='mb-3' controlId='formBasicPassword'>\r\n              <Form.Label>Search</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                name='text'\r\n                placeholder='e.g. Abcde..'\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.text}\r\n              />\r\n            </Form.Group>\r\n            <h4>{'Select Exam Type'}</h4>\r\n            <div className='pl-2'>\r\n              {examTypes.map((examType, ind) => (\r\n                <Form.Check\r\n                  label={examType.name}\r\n                  name={examType.name}\r\n                  type={'checkbox'}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  id={examType.name}\r\n                  value={examType.value}\r\n                />\r\n              ))}\r\n            </div>\r\n            <Button className='mt-3' type='submit'>\r\n              Apply\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Row } from 'react-bootstrap'\r\nimport ExamByCat from './examByCat'\r\n\r\nexport default function Latest({ courseId = null }) {\r\n  const [exam, setExam] = useState(null)\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        process.env.REACT_APP_SITE_URL +\r\n          '/exams/current' +\r\n          '?courseId=' +\r\n          courseId\r\n      )\r\n      .then((res) => {\r\n        setExam(res.data)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <h3 className='text-center'>Current Exam</h3>\r\n      <Row\r\n        className='mx-auto mb-5 py-3 pl-2 border border-secondary'\r\n        style={{ width: '350px' }}\r\n      >\r\n        {exam ? (\r\n          <ExamByCat exam={exam} courseId={courseId} />\r\n        ) : (\r\n          <p>No current exam</p>\r\n        )}\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport Pagination from 'react-js-pagination'\r\nimport { useParams } from 'react-router'\r\nimport Spinner from '../../components/shared/spinner/spinner'\r\nimport { paginate } from '../../utils/paginate'\r\nimport ExamByCat from './component/examByCat'\r\nimport ExamFilter from './component/examFilter'\r\nimport Latest from './component/latest'\r\n\r\nexport default function ExamListsByCatShower() {\r\n  const { id } = useParams()\r\n  const [exams, setExams] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const pageSize = 5\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    axios\r\n      .post(process.env.REACT_APP_SITE_URL + '/exams/course/' + id)\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setExams(response.data)\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false)\r\n        console.log(e)\r\n      })\r\n  }, [id])\r\n\r\n  const paginatedExams = paginate(exams, currentPage, pageSize)\r\n\r\n  return (\r\n    <div>\r\n      {loading && <Spinner />}\r\n      <Row>\r\n        <Col lg={2}>\r\n          <ExamFilter\r\n            setExams={setExams}\r\n            id={id}\r\n            setCurrentPage={setCurrentPage}\r\n          />\r\n        </Col>\r\n        <Col lg={10}>\r\n          <Latest courseId={id} />\r\n          <h2 className='text-center'>\r\n            <span className='mr-2'>Available Exams</span>\r\n          </h2>\r\n          {!loading && (\r\n            <p className='text-center text-danger'>\r\n              {exams.length < 1 && 'NO Exam is avaiable.'}\r\n            </p>\r\n          )}\r\n          <div className='d-flex justify-content-center flex-wrap'>\r\n            {paginatedExams &&\r\n              paginatedExams.map((exam) => (\r\n                <Row\r\n                  key={exam.title}\r\n                  className='m-2 py-3 pl-2 border border-secondary' // bg-secondary text-white\r\n                  style={{ width: '350px' }}\r\n                >\r\n                  <ExamByCat exam={exam} courseId={id} />\r\n                </Row>\r\n              ))}\r\n          </div>\r\n          <div className='d-flex justify-content-center mt-3'>\r\n            <Pagination\r\n              activePage={currentPage}\r\n              itemsCountPerPage={pageSize}\r\n              totalItemsCount={exams.length}\r\n              pageRangeDisplayed={2}\r\n              onChange={(page) => {\r\n                setCurrentPage(page)\r\n              }}\r\n              itemClass='page-item'\r\n              linkClass='page-link'\r\n              prevPageText='Previous'\r\n              nextPageText='Next'\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}