{"version":3,"sources":["components/shared/spinner/spinner.js","../node_modules/react-bootstrap/esm/Spinner.js","components/exams/gallary/examCard.js","components/exams/gallary/gallaryCard.js","container/exams/examLists.js"],"names":["contentCenter","position","top","left","zIndex","SpinnerCustom","animation","role","variant","style","Spinner","React","forwardRef","_ref","ref","bsPrefix","size","children","_ref$as","as","Component","className","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","iconStyle","SocialShare","title","description","url","process","fontSize","quote","hashtag","round","body","source","categoryTypeVariant","name","ExamCard","width","height","examId","imgSrc","categoryType","createdAt","endDate","free","examLoader","dispatch","landing","useDispatch","token","useSelector","state","auth","intl","useIntl","useState","res","setRes","key","canActivate","rolePermitted","admin","Img","src","Body","Title","fontWeight","Subtitle","map","category","formatMessage","id","defaultMessage","moment","format","to","onClick","resetExamResultLoader","disabled","trigger","placement","overlay","PopoverWrapper","Content","axios","baseURL","method","then","response","catch","error","JSON","stringify","getRndInteger","min","max","Math","floor","random","ListCard","exams","authToken","show","setShow","handleClose","onHide","Header","closeButton","toUpperCase","slice","exam","length","imageUrl","filter","cat","Footer","marginTop","i","startDate","examType","ExamLists","this","onGetAllExamsLoader","RoutesConfig","Exams","metaInfo","Object","keys","injectIntl","connect","getAllExamsLoader"],"mappings":"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","file":"static/js/28.c7366478.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst contentCenter = {\r\n  //styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '45vh',\r\n  left: '50%',\r\n  zIndex: '10000000000'\r\n}\r\n\r\nexport default function SpinnerCustom() {\r\n  return (\r\n    <Spinner\r\n      animation='grow'\r\n      role='status'\r\n      variant='dark'\r\n      style={contentCenter}\r\n    ></Spinner>\r\n  )\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useState } from 'react'\r\nimport { Badge, Button, Card, OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  EmailIcon,\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n  LinkedinIcon,\r\n  LinkedinShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton\r\n} from 'react-share'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate'\r\n\r\nconst iconStyle = {\r\n  size: 35,\r\n  round: true\r\n}\r\n\r\nconst SocialShare = ({ title, description, url, ...props }) => {\r\n  url = process.env.REACT_APP_BASE_URL + url\r\n\r\n  return (\r\n    <div className='mt-3' {...props}>\r\n      <hr />\r\n\r\n      <Badge\r\n        variant='success'\r\n        className='mr-1 p-1'\r\n        style={{ fontSize: '.8rem' }}\r\n      >\r\n        Share on\r\n      </Badge>\r\n\r\n      <FacebookShareButton\r\n        url={url}\r\n        quote={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <FacebookIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </FacebookShareButton>\r\n\r\n      <TwitterShareButton\r\n        url={url}\r\n        title={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <TwitterIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </TwitterShareButton>\r\n\r\n      <EmailShareButton\r\n        url={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <EmailIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </EmailShareButton>\r\n\r\n      <LinkedinShareButton\r\n        url={url}\r\n        source={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <LinkedinIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </LinkedinShareButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n\r\nexport default function ExamCard({\r\n  width = '350',\r\n  height = '180',\r\n  examId,\r\n  imgSrc,\r\n  title,\r\n  categoryType,\r\n  description,\r\n  createdAt,\r\n  endDate,\r\n  free,\r\n  examLoader,\r\n  landing\r\n}) {\r\n  const dispatch = useDispatch()\r\n  const token = useSelector((state) => state.auth.token)\r\n  const intl = useIntl()\r\n  const [res, setRes] = useState(null)\r\n\r\n  return (\r\n    <>\r\n      <Card key={examId} className='mr-2 mb-2' style={{ width: width + 'px' }}>\r\n        {!canActivate(rolePermitted.admin, token) && (\r\n          <Card.Img variant='top' src={imgSrc} width={width} height={height} />\r\n        )}\r\n        <Card.Body>\r\n          <div>\r\n            <Card.Title style={{ fontSize: '1.4rem', fontWeight: '900' }}>\r\n              {title}\r\n            </Card.Title>\r\n\r\n            <Card.Subtitle>\r\n              {categoryType &&\r\n                categoryType.map((category) => (\r\n                  <Badge\r\n                    key={category.name}\r\n                    variant={categoryTypeVariant(category.name)}\r\n                    className='mr-1'\r\n                  >\r\n                    {category.name}\r\n                  </Badge>\r\n                ))}\r\n            </Card.Subtitle>\r\n          </div>\r\n\r\n          <div className='mt-1 pt-2'>\r\n            <p className=''>{description} </p>\r\n\r\n            <p className='text-right'>\r\n              <span className='text-muted'>\r\n                {intl.formatMessage({\r\n                  id: 'db.so',\r\n                  defaultMessage: 'Start on'\r\n                })}{' '}\r\n                : {moment(createdAt).format('YYYY-MMM-DD hh:mm A')}\r\n              </span>\r\n              <br />\r\n              {\r\n                <span className='text-danger'>\r\n                  {intl.formatMessage({\r\n                    id: 'db.eo',\r\n                    defaultMessage: 'Ends on'\r\n                  })}{' '}\r\n                  : {moment(endDate).format('YYYY-MMM-DD hh:mm A')}\r\n                </span>\r\n              }\r\n            </p>\r\n          </div>\r\n\r\n          {!canActivate(rolePermitted.admin, token) && (\r\n            <>\r\n              <div className='d-flex justify-content-around'>\r\n                <Link\r\n                  className='text-white'\r\n                  to={(free ? '/exams/free/' : '/exams/') + examId}\r\n                >\r\n                  <Button\r\n                    variant='outline-primary'\r\n                    onClick={() => {\r\n                      dispatch(resetExamResultLoader())\r\n                    }}\r\n                  >\r\n                    <FormattedMessage\r\n                      id='btn.start'\r\n                      defaultMessage='Start Exam'\r\n                    />\r\n                  </Button>\r\n                </Link>\r\n                <Link className='text-white' to={'/result/rank/' + examId}>\r\n                  <Button\r\n                    onClick={() => {\r\n                      dispatch(resetExamResultLoader())\r\n                    }}\r\n                    variant='outline-dark'\r\n                  >\r\n                    <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              <SocialShare\r\n                url={'/exams/' + examId}\r\n                title={title}\r\n                description={description}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {canActivate(rolePermitted.admin, token) && (\r\n            <div>\r\n              <Button disabled={true} variant='primary' className='mr-3'>\r\n                Edit\r\n              </Button>\r\n              <OverlayTrigger\r\n                trigger='click'\r\n                placement='top'\r\n                overlay={\r\n                  <PopoverWrapper\r\n                    id={examId}\r\n                    res={res}\r\n                    setRes={setRes}\r\n                    token={token}\r\n                    examLoader={examLoader}\r\n                  />\r\n                }\r\n              >\r\n                <Button\r\n                  onClick={() => {\r\n                    dispatch(resetExamResultLoader())\r\n                  }}\r\n                  variant='danger'\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nconst PopoverWrapper = React.forwardRef(\r\n  ({ id, res, setRes, token, examLoader, ...props }, ref) => (\r\n    <Popover id='popover-basic' ref={ref} {...props}>\r\n      <Popover.Title as='h3'>Are You Sure To delete The Exam</Popover.Title>\r\n      <Popover.Content>\r\n        <p>{res}</p>\r\n        <Button\r\n          variant='danger'\r\n          onClick={() => {\r\n            //setAuthorizationToken(token);\r\n            axios({\r\n              baseURL: process.env.REACT_APP_SITE_URL,\r\n              url: '/exams/' + id,\r\n              method: 'delete'\r\n            })\r\n              .then((response) => {\r\n                examLoader()\r\n                setRes('Successfully Deleted')\r\n              })\r\n              .catch((error) => {\r\n                setRes('Can not delete the exam' + JSON.stringify(error))\r\n              })\r\n          }}\r\n        >\r\n          Yes\r\n        </Button>\r\n      </Popover.Content>\r\n    </Popover>\r\n  )\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, Col, Modal, Row } from 'react-bootstrap'\r\nimport { useIntl } from 'react-intl'\r\nimport { useSelector } from 'react-redux'\r\nimport ExamCard from './examCard'\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\nexport default function ListCard({ title, exams, landing, examLoader }) {\r\n  const authToken = useSelector((state) => (state.auth.token ? true : false))\r\n  const intl = useIntl()\r\n\r\n  const [show, setShow] = useState(false)\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose} size={'xl'}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {intl.formatMessage({ id: 'btn.more', defaultMessage: 'More' })}\r\n            <Badge variant='warning'>{' ' + title.toUpperCase() + ' '}</Badge>\r\n            {intl.formatMessage({ id: 'btn.exams', defaultMessage: 'Exams' })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {\r\n            <Row className='mt-3 ml-3'>\r\n              <Col className='d-flex justify-content-center flex-wrap'>\r\n                {exams.slice(2).map((exam) => (\r\n                  <ExamCard\r\n                    key={exam.id}\r\n                    examId={exam.id}\r\n                    imgSrc={\r\n                      exam.categoryType.length > 0\r\n                        ? process.env.REACT_APP_SITE_URL +\r\n                          '/' +\r\n                          exam.categoryType[\r\n                            getRndInteger(0, exam.categoryType.length)\r\n                          ].imageUrl\r\n                        : '/assets/image/uncat.jpg'\r\n                    }\r\n                    title={exam.title}\r\n                    categoryType={\r\n                      exam.categoryType.length > 0\r\n                        ? exam.categoryType\r\n                        : [{ name: 'Uncategorized' }]\r\n                    }\r\n                    description={exam.description}\r\n                    createdAt={exam.createdAt}\r\n                    endDate={exam.endDate}\r\n                    free={\r\n                      !authToken &&\r\n                      exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                        .length > 0\r\n                    }\r\n                    examLoader={examLoader}\r\n                  />\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          }\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div\r\n        className='mb-2 border position-relative'\r\n        style={{ marginTop: '100px' }}\r\n      >\r\n        <h3\r\n          className='text-center bg-warning text-light px-2 py-1'\r\n          style={{ position: 'absolute', top: '-30px', left: '50px' }}\r\n        >\r\n          {title.toUpperCase() + ' '}{' '}\r\n          {!landing && (\r\n            <Badge variant='light' className='ml-2'>\r\n              {' '}\r\n              {exams.length}\r\n            </Badge>\r\n          )}{' '}\r\n        </h3>\r\n        <div className='mt-4'>\r\n          <div className='d-flex justify-content-around flex-wrap'>\r\n            {exams.length < 1 && (\r\n              <p className='lead text-danger'>\r\n                {' '}\r\n                {title +\r\n                  ' ' +\r\n                  intl.formatMessage({\r\n                    id: 'noExamCreated',\r\n                    defaultMessage: 'Exams is not created'\r\n                  })}{' '}\r\n              </p>\r\n            )}\r\n            {exams.map((exam, i) =>\r\n              i < 3 ? (\r\n                <ExamCard\r\n                  key={exam.id}\r\n                  examId={exam.id}\r\n                  imgSrc={\r\n                    exam.categoryType.length > 0\r\n                      ? process.env.REACT_APP_SITE_URL +\r\n                        '/' +\r\n                        exam.categoryType[\r\n                          getRndInteger(0, exam.categoryType.length)\r\n                        ].imageUrl\r\n                      : '/assets/image/uncat.jpg'\r\n                  }\r\n                  title={exam.title}\r\n                  categoryType={\r\n                    exam.categoryType.length > 0\r\n                      ? exam.categoryType\r\n                      : [{ name: 'Uncategorized' }]\r\n                  }\r\n                  description={exam.description}\r\n                  createdAt={exam.startDate}\r\n                  endDate={exam.endDate}\r\n                  free={\r\n                    !authToken &&\r\n                    exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                      .length > 0\r\n                  }\r\n                  examLoader={examLoader}\r\n                />\r\n              ) : (\r\n                ''\r\n              )\r\n            )}\r\n          </div>\r\n          {!landing && (\r\n            <div className='my-2 d-flex justify-content-center'>\r\n              {exams.length > 2 ? (\r\n                <Button\r\n                  style={{ height: '50px', width: '150px' }}\r\n                  onClick={() => {\r\n                    handleShow()\r\n                  }}\r\n                >\r\n                  {intl.formatMessage({\r\n                    id: 'btn.more',\r\n                    defaultMessage: 'More...'\r\n                  })}\r\n                  .\r\n                </Button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport { connect } from 'react-redux'\r\nimport GallaryCard from '../../components/exams/gallary/gallaryCard'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport Spinner from '../../components/shared/spinner/spinner'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { getAllExamsLoader } from '../../store/exams'\r\n\r\nexport const examType = [\r\n  'Assignment',\r\n  'Weekly',\r\n  'Monthly',\r\n  'Assesment',\r\n  'Term',\r\n  'Test',\r\n  'Final'\r\n]\r\n\r\nclass ExamLists extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetAllExamsLoader()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <MetaInfo {...RoutesConfig.Exams.metaInfo} />\r\n        {this.props.exams.exams.length < 1 && <Spinner />}\r\n        {/* {this.props.exams.exams.length < 1 && (\r\n          <Spinner\r\n            animation=\"border\"\r\n            role=\"status\"\r\n            variant=\"dark\"\r\n            className=\"content-center\"\r\n          ></Spinner>\r\n        )} */}\r\n        {Object.keys(this.props.exams.exams).map(\r\n          (key) =>\r\n            this.props.exams.exams[key] && (\r\n              <GallaryCard\r\n                key={key}\r\n                title={this.props.intl.formatMessage({\r\n                  id: key,\r\n                  defaultMessage: key\r\n                })}\r\n                exams={this.props.exams.exams[key]}\r\n                examLoader={this.props.onGetAllExamsLoader}\r\n              />\r\n            )\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetAllExamsLoader: () => dispatch(getAllExamsLoader())\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams\r\n  }\r\n}\r\n\r\nexport default injectIntl(\r\n  connect(mapStateToProps, mapDispatchToProps)(ExamLists)\r\n)\r\n"],"sourceRoot":""}