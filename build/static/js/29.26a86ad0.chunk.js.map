{"version":3,"sources":["utils/paginate.js","components/pagination/pagination.jsx","components/navbar/subNavBar.js","components/exams/paper/question/stem.jsx","components/exams/paper/question/question.jsx","container/exams/examTaker.js"],"names":["paginate","items","pageNumber","pageSize","startIndex","_","slice","take","value","pagination","itemsCount","onPageHandler","currentPage","pageCount","Math","ceil","number","push","Item","key","onClick","active","className","style","width","height","connect","state","isAuthenticated","auth","token","props","pages","as","to","pathname","toUpperCase","map","QuestionStemView","id","qType","stem","index","handleChange","defaultChecked","disableQuestions","useSelector","exams","Row","Col","xs","Form","Group","controlId","Check","type","Input","disabled","includes","name","onChange","Label","toString","QuestionForm","question","ListGroup","qText","stems","Completionist","renderer","hours","minutes","seconds","completed","Badge","variant","fontSize","ExamTaker","loading","date","Date","now","timeExpired","modalShow","arrowState","showPagination","timeTakenToComplete","answers","answerIds","Set","setState","modalHide","page","onHandleChange","e","target","onDisableQuestionsAddLoader","split","preState","add","onSwithchHandleChange","checked","questions","length","onSubmitHandler","forEach","find","o","free","onPostFreeExamByIdLoader","examId","match","params","toFixed","questionIdsByOrder","onPostExamByIdLoader","this","onResetExamLoader","onGetExamByIdLoader","onGetFreeExamByIdLoader","Helmet","examResult","error","examError","Spinner","animation","role","Modal","show","onHide","Header","Title","Body","onComplete","closeButton","intl","formatMessage","defaultMessage","Footer","Button","timeLimit","Switch","label","onTick","Alert","spy","smooth","offset","duration","size","lg","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","prevPageText","nextPageText","Component","injectIntl","dispatch","getExamByIdLoader","getFreeExamByIdLoader","data","postExamByIdLoader","postFreeExamByIdLoader","resetExamError","disableQuestionsAdd","payload","withRouter"],"mappings":"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","file":"static/js/29.26a86ad0.chunk.js","sourcesContent":["import _ from 'lodash'\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize\r\n  return _(items).slice(startIndex).take(pageSize).value()\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst pagination = ({ itemsCount, pageSize, onPageHandler, currentPage }) => {\r\n  const pageCount = Math.ceil(itemsCount / pageSize)\r\n  if (pageCount === 1) return null\r\n  const items = []\r\n  for (let number = 1; number <= pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        onClick={() => {\r\n          onPageHandler(number)\r\n        }}\r\n        active={number === currentPage}\r\n        className='my-2 mr-2 text-center'\r\n        style={{ width: '40px', height: '30px' }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    )\r\n  }\r\n  return (\r\n    <Pagination className='justify-content-start align-content-start flex-wrap'>\r\n      {items}\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default pagination\r\n","import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst subNavBar = (props) => {\r\n  const pages = props.isAuthenticated\r\n    ? ['dashboard', 'exams', 'logout']\r\n    : ['exams', 'signup', 'login']\r\n\r\n  return (\r\n    <Nav className=''>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to={{ pathname: '/' }} className='nav-link'>\r\n          {'Home'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to='/#contact' className='nav-link'>\r\n          {'Contact'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      {pages.map((value) => (\r\n        <Nav.Item key={value} as='li' className='mr-3'>\r\n          <NavLink\r\n            // href={\"/\" + value}\r\n            to={{ pathname: '/' + value }}\r\n            className='nav-link'\r\n          >\r\n            {value.toUpperCase()}\r\n          </NavLink>\r\n        </Nav.Item>\r\n      ))}\r\n      {/* </Scrollspy> */}\r\n    </Nav>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token !== null\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(subNavBar)\r\n","import React from 'react'\r\nimport { Col, Form, Row } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux'\r\nconst QuestionStemView = ({\r\n  id,\r\n  qType,\r\n  stem,\r\n  index,\r\n  handleChange,\r\n  defaultChecked\r\n}) => {\r\n  //const dispatch = useDispatch();\r\n  const disableQuestions = useSelector((state) => state.exams.disableQuestions)\r\n\r\n  // const disableQuestionsAddLoader = (name)=>{\r\n  //   dispatch({type: disableQuestionsAdd.type, payload: name})\r\n\r\n  return (\r\n    <Row className='px-md-4 px-xs-2'>\r\n      <Col xs='9'>{index + '. ' + stem}</Col>\r\n      <Form.Group as={Col} controlId='formGroupQuestionStemAnswer'>\r\n        {qType === 'matrix' ? (\r\n          <>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  disableQuestions &&\r\n                  disableQuestions.includes(id + '_' + index)\r\n                }\r\n                type='radio'\r\n                //label=\"True\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios1'\r\n                value={1}\r\n                defaultChecked={defaultChecked === '1'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>True</Form.Check.Label>\r\n            </Form.Check>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  disableQuestions &&\r\n                  disableQuestions.includes(id + '_' + index)\r\n                }\r\n                type='radio'\r\n                //label=\"False\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios2'\r\n                value={0}\r\n                defaultChecked={defaultChecked === '0'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>False</Form.Check.Label>\r\n            </Form.Check>\r\n          </>\r\n        ) : (\r\n          <Form.Check>\r\n            <Form.Check.Input\r\n              disabled={\r\n                disableQuestions && disableQuestions.includes(id.toString())\r\n              }\r\n              type='radio'\r\n              name={id}\r\n              id='formHorizontalRadios1'\r\n              value={index}\r\n              defaultChecked={defaultChecked == index}\r\n              onChange={handleChange}\r\n              className='mb-0'\r\n            />\r\n          </Form.Check>\r\n        )}\r\n      </Form.Group>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default QuestionStemView\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport Stem from './stem'\r\n\r\nconst QuestionForm = ({ question, handleChange, defaultChecked }) => {\r\n  return (\r\n    <ListGroup as='ul' className='mt-3'>\r\n      <ListGroup.Item as='li' active>\r\n        {question.qText}\r\n      </ListGroup.Item>\r\n\r\n      {question.stems.map((stem, index) => (\r\n        <ListGroup.Item as='li' key={index}>\r\n          <Stem\r\n            qType={question.qType}\r\n            stem={stem}\r\n            index={index + 1}\r\n            id={question.id}\r\n            handleChange={handleChange}\r\n            defaultChecked={\r\n              defaultChecked\r\n                ? question.qType === 'matrix'\r\n                  ? defaultChecked[index]\r\n                  : defaultChecked[0]\r\n                : null\r\n            }\r\n          />\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default QuestionForm\r\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Button,\r\n  Col, Form,\r\n  Modal,\r\n  Row,\r\n  Spinner\r\n} from \"react-bootstrap\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\r\nimport { injectIntl } from 'react-intl';\r\nimport Pagination from \"react-js-pagination\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link as LinkScroll } from \"react-scroll\";\r\nimport QuestionView from \"../../components/exams/paper/question/question\";\r\nimport SubNavBar from \"../../components/navbar/subNavBar\";\r\nimport PaginationCustom from \"../../components/pagination/pagination\";\r\nimport {\r\n  disableQuestionsAdd,\r\n  getExamByIdLoader,\r\n  getFreeExamByIdLoader,\r\n  postExamByIdLoader,\r\n  postFreeExamByIdLoader,\r\n  resetExamError\r\n} from \"../../store/exams\";\r\nimport { paginate } from \"../../utils/paginate\";\r\n\r\n// Random component\r\nconst Completionist = () => (\r\n  <span className=\"text-danger\">Your Time is Finished</span>\r\n);\r\n\r\n// Renderer callback with condition\r\nconst renderer = ({ hours, minutes, seconds, completed }) => {\r\n  if (completed) {\r\n    // Render a completed state\r\n    return <Completionist />;\r\n  } else {\r\n    // Render a countdown\r\n    return (\r\n      <span>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {hours + \" H\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {minutes + \" M\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {seconds + \" S\"}\r\n        </Badge>\r\n      </span>\r\n    );\r\n  }\r\n};\r\n\r\nclass ExamTaker extends Component {\r\n  state = {\r\n    loading: false,\r\n    //For Pagination\r\n    pageSize: 1,\r\n    currentPage: 1,\r\n    //For Main Answer Sheet React CountDown\r\n    date: Date.now(),\r\n    //use in ending exam\r\n    timeExpired: false,\r\n    modalShow: false,\r\n    arrowState: true,\r\n    showPagination: true,\r\n  };\r\n\r\n  timeTakenToComplete = 0;\r\n  answers = [];\r\n  answerIds = new Set();\r\n\r\n  modalShow = () => {\r\n    this.setState({ modalShow: true });\r\n  };\r\n  modalHide = () => {\r\n    this.setState({ modalShow: false });\r\n  };\r\n\r\n  //For paination\r\n  onPageHandler = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  onHandleChange = (e) => {\r\n        \r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    \r\n    this.props.onDisableQuestionsAddLoader(name);\r\n\r\n    if (name.includes(\"_\")) {\r\n      const [id, index] = name.split(\"_\");\r\n      this.setState((preState) => {\r\n        if (!preState[id]) preState[id] = [];\r\n        preState[id][index - 1] = value;\r\n        this.answerIds.add(id);\r\n      });\r\n    } else {\r\n      this.setState((preState) => {\r\n        preState[name] = [value];\r\n        this.answerIds.add(name);\r\n      });\r\n    }\r\n  };\r\n\r\n  onSwithchHandleChange = (e) => {\r\n    const checked = e.target.checked;\r\n    if(checked) {\r\n      this.setState({pageSize: this.props.exams.questions.length, currentPage: 1 ,showPagination: false});\r\n    }\r\n    else{\r\n      this.setState({pageSize: 1, showPagination: true});\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  // for submitting Answer Sheet\r\n  onSubmitHandler = () => {\r\n    this.setState({ loading: true });\r\n\r\n    this.answerIds.forEach((id) => {\r\n      this.answers.push({\r\n        id: id,\r\n        stems: this.state[id],\r\n        type: _.find(this.props.exams.questions, (o) => o.id == id).qType,\r\n      });\r\n    });\r\n    if (this.props.free) {\r\n      this.props.onPostFreeExamByIdLoader({\r\n        examId: this.props.match.params.id,\r\n        timeTakenToComplete: (this.timeTakenToComplete / 60).toFixed(4),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    } else {\r\n      this.props.onPostExamByIdLoader({\r\n        examId: this.props.match.params.id,\r\n        timeTakenToComplete: Math.ceil(this.timeTakenToComplete / 60).toFixed(\r\n          4\r\n        ),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onResetExamLoader();\r\n    if (this.props.auth.token) {\r\n      this.props.onGetExamByIdLoader(this.props.match.params.id);\r\n    } else {\r\n      this.props.onGetFreeExamByIdLoader(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const questions = paginate(\r\n      this.props.exams.questions,\r\n      this.state.currentPage,\r\n      this.state.pageSize\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>Exam- test your knowledge</title>\r\n        </Helmet>\r\n        {(this.props.exams.examResult || this.props.exams.error) && (\r\n          <Redirect to=\"/result\" />\r\n        )}\r\n\r\n        {(this.props.exams.questions.length < 1 && !this.props.exams.examError) && (\r\n          <Spinner\r\n            animation=\"border\"\r\n            role=\"status\"\r\n            variant=\"dark\"\r\n            className=\"content-center\"\r\n          ></Spinner>\r\n        )}\r\n\r\n        {this.state.loading  && (\r\n          <Spinner\r\n            animation=\"border\"\r\n            role=\"status\"\r\n            variant=\"dark\"\r\n            className=\"content-center\"\r\n          ></Spinner>\r\n        )}\r\n\r\n\r\n        {/* Modal tests are you want submit or time expired*/}\r\n        <Modal show={this.state.modalShow} onHide={this.modalHide}>\r\n          {this.state.timeExpired ? (\r\n            <>\r\n              <Modal.Header>\r\n                <Modal.Title className=\"text-danger\">Time Expired</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">You will Taken To Result Page.</p>\r\n                  <Countdown\r\n                    date={Date.now() + 5 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">\r\n                    {this.props.intl.formatMessage({id: 'et.agree', defaultMessage: \"Are You Sure ? You will Taken To Result Page.\"})}\r\n                  </p>\r\n                  <Countdown\r\n                    date={Date.now() + 5 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.modalHide}>\r\n                {this.props.intl.formatMessage({id: 'et.no', defaultMessage: \"Go Back\"})}\r\n                  \r\n                </Button>\r\n                <Button variant=\"primary\" onClick={this.onSubmitHandler}>\r\n                {this.props.intl.formatMessage({id: 'et.yes', defaultMessage: \"Yes, I Want.\"})}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </>\r\n          )}\r\n        </Modal>\r\n\r\n        {this.props.exams.timeLimit && (\r\n          <div className=\"text-dark text-center mt-1\" id=\"et-top\">\r\n            <Form.Switch\r\n            id=\"custom-switch\"\r\n            label={this.props.intl.formatMessage({id: 'btn.aqv', defaultMessage: \"Switch to All Questions View\"})}\r\n            className=\"mb-2\"\r\n            onChange={this.onSwithchHandleChange}\r\n            > \r\n\r\n            </Form.Switch>\r\n            <Countdown\r\n              date={this.state.date + this.props.exams.timeLimit * 60 * 1000}\r\n              renderer={renderer}\r\n              onTick={() => {\r\n                this.timeTakenToComplete++;\r\n              }}\r\n              onComplete={() => {\r\n                this.setState({ timeExpired: true, modalShow: true });\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        {this.props.exams.examError ? (\r\n          <>\r\n            {\" \"}\r\n            <Alert variant=\"danger\" className=\"text-center mt-5\">\r\n              <h2>{this.props.exams.examError}</h2>\r\n              <h4>Possible Solution</h4>\r\n              <p>\r\n                You may not be logged in. So you can not participate exams other\r\n                than free. So login or participate free exam only.\r\n              </p>\r\n            </Alert>\r\n            <SubNavBar />\r\n          </>\r\n        ) : (\r\n          <Row >\r\n            <div className=\"scroll-container d-flex justify-content-center flex-wrap\">\r\n              <LinkScroll\r\n                to={\"et-top\"}\r\n                spy={true}\r\n                smooth={true}\r\n                offset={-50}\r\n                duration={500}\r\n                //className=\"text-secondary\"\r\n                //to={{ pathname: \"/\" }}\r\n              >\r\n                <FaRegArrowAltCircleUp size={\"1.2rem\"} />\r\n                \r\n              </LinkScroll>\r\n\r\n              <LinkScroll\r\n                to={\"qNavigator\"}\r\n                spy={true}\r\n                smooth={true}\r\n                offset={-50}\r\n                duration={500}\r\n                //className=\"text-secondary\"\r\n                //to={{ pathname: \"/\" }}\r\n              >\r\n                <FaRegArrowAltCircleDown size={\"1.2rem\"}/>\r\n\r\n              </LinkScroll>\r\n            </div>\r\n            <Col lg={9}>\r\n              {questions.map((question) => (\r\n                <QuestionView\r\n                  key={question.id}\r\n                  question={question}\r\n                  handleChange={this.onHandleChange}\r\n                  defaultChecked={\r\n                    this.state[question.id] ? this.state[question.id] : null\r\n                  }\r\n                />\r\n              ))}\r\n              <div className=\"mt-2 d-flex justify-content-center\">\r\n                {this.state.showPagination && <Pagination\r\n                  activePage={this.state.currentPage}\r\n                  itemsCountPerPage={1}\r\n                  totalItemsCount={this.props.exams.questions.length}\r\n                  pageRangeDisplayed={1}\r\n                  onChange={this.onPageHandler}\r\n                  itemClass=\"page-item\"\r\n                  linkClass=\"page-link\"\r\n                  prevPageText=\"Previous\"\r\n                  nextPageText=\"Next\"\r\n                /> }\r\n                <Button onClick={this.modalShow} className=\"mb-3 ml-5 btn-md\" id=\"qNavigator\">\r\n                {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col lg={3} className=\"mt-3\">\r\n              {this.state.showPagination && <PaginationCustom\r\n                itemsCount={this.props.exams.questions.length}\r\n                pageSize={this.state.pageSize}\r\n                currentPage={this.state.currentPage}\r\n                onPageHandler={this.onPageHandler}\r\n              />}\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetExamByIdLoader: (id) => dispatch(getExamByIdLoader(id)),\r\n    onGetFreeExamByIdLoader: (id) => dispatch(getFreeExamByIdLoader(id)),\r\n    onPostExamByIdLoader: (data) => dispatch(postExamByIdLoader(data)),\r\n    onPostFreeExamByIdLoader: (data) => dispatch(postFreeExamByIdLoader(data)),\r\n    onResetExamLoader: () => dispatch({ type: resetExamError.type }),\r\n    onDisableQuestionsAddLoader: (name) => dispatch({type: disableQuestionsAdd.type, payload: name})\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams,\r\n    auth: state.auth,\r\n    //   category: state.category,\r\n    //   api: state.api,\r\n  };\r\n};\r\n\r\nexport default injectIntl(connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ExamTaker)));\r\n"],"sourceRoot":""}