{"version":3,"sources":["components/exams/gallary/examCatBadges.js","components/exams/gallary/examCard.js","components/exams/gallary/gallaryCard.js","container/exams/examLists.js"],"names":["ExamCatBadges","categoryType","map","category","key","name","pill","variant","categoryTypeVariant","className","EditExam","React","lazy","isExamFree","filter","cat","length","ExamCard","width","height","examId","courseId","imgSrc","title","description","examLoader","createdAt","endDate","landing","dispatch","useDispatch","token","useSelector","state","auth","useIntl","useState","res","setRes","editExam","setEditExam","style","canActivate","rolePermitted","coordinator","Img","src","Body","Title","fontSize","fontWeight","Subtitle","ct","to","onClick","resetExamResultLoader","disabled","id","defaultMessage","url","fallback","editExamHandleClose","trigger","placement","overlay","PopoverWrapper","forwardRef","ref","props","as","Content","axios","baseURL","process","method","then","response","catch","error","JSON","stringify","ListCard","exams","intl","show","setShow","handleClose","Modal","onHide","size","Header","closeButton","formatMessage","Badge","toUpperCase","Row","Col","slice","exam","min","max","Math","floor","random","imageUrl","free","Footer","Button","maxWidth","i","startDate","examType","examTypeBgColor","ExamLists","this","onGetAllExamsLoader","RoutesConfig","Exams","metaInfo","Object","keys","Component","injectIntl","connect","getAllExamsLoader"],"mappings":"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","file":"static/js/45.a55c21ff.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\n\r\nexport default function ExamCatBadges({ categoryType }) {\r\n  return (\r\n    categoryType &&\r\n    categoryType.map((category) => (\r\n      <Badge\r\n        key={category.name}\r\n        pill\r\n        variant={categoryTypeVariant(category.name)}\r\n        className='mr-1'\r\n      >\r\n        {category.name}\r\n      </Badge>\r\n    ))\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n","import axios from 'axios'\r\nimport React, { Suspense, useState } from 'react'\r\nimport { Alert, Button, Card, OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate'\r\nimport SocialShare from '../../socialShare/socialShare'\r\nimport ExamCatBadges from './examCatBadges'\r\nconst EditExam = React.lazy(() =>\r\n  import('../../../container/examBuilder/editExam')\r\n)\r\n\r\nfunction isExamFree(categoryType) {\r\n  return categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n}\r\n\r\nexport default function ExamCard({\r\n  width = '350',\r\n  height = '180',\r\n  examId,\r\n  courseId,\r\n  imgSrc,\r\n  title,\r\n  categoryType,\r\n  description,\r\n  createdAt,\r\n  endDate,\r\n  examLoader,\r\n  landing\r\n}) {\r\n  const dispatch = useDispatch()\r\n  const token = useSelector((state) => state.auth.token)\r\n  const intl = useIntl()\r\n  const [res, setRes] = useState(null)\r\n  const [editExam, setEditExam] = useState(false)\r\n\r\n  function editExamHandleClose() {\r\n    setEditExam(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card key={examId} className='mr-2 mb-2' style={{ width: width + 'px' }}>\r\n        <LazyLoadComponent>\r\n          {!canActivate(rolePermitted.coordinator, token) && (\r\n            <Card.Img\r\n              variant='top'\r\n              src={imgSrc}\r\n              width={width}\r\n              height={height}\r\n            />\r\n          )}\r\n        </LazyLoadComponent>\r\n        <Card.Body>\r\n          <div>\r\n            <Card.Title style={{ fontSize: '1.4rem', fontWeight: '900' }}>\r\n              {title}\r\n            </Card.Title>\r\n\r\n            <Card.Subtitle>\r\n              <ExamCatBadges\r\n                categoryType={\r\n                  token\r\n                    ? categoryType.filter((ct) => ct.name !== 'Free')\r\n                    : categoryType\r\n                }\r\n              />\r\n            </Card.Subtitle>\r\n          </div>\r\n\r\n          <div className='mt-1 pt-2'>\r\n            <p className=''>{description} </p>\r\n\r\n            {/* <p className='text-right'>\r\n              <span className='text-muted'>\r\n                {intl.formatMessage({\r\n                  id: 'db.so',\r\n                  defaultMessage: 'Start on'\r\n                })}{' '}\r\n                : {moment(createdAt).format('YYYY-MMM-DD hh:mm A')}\r\n              </span>\r\n              <br />\r\n              {\r\n                <span className='text-danger'>\r\n                  {intl.formatMessage({\r\n                    id: 'db.eo',\r\n                    defaultMessage: 'Ends on'\r\n                  })}{' '}\r\n                  : {moment(endDate).format('YYYY-MMM-DD hh:mm A')}\r\n                </span>\r\n              }\r\n            </p> */}\r\n          </div>\r\n          <hr />\r\n          {token &&\r\n            landing &&\r\n            (isExamFree(categoryType) ? (\r\n              <Alert variant='warning' className='mt-2'>\r\n                Taking part to this exam will not be added to your exam profile.{' '}\r\n              </Alert>\r\n            ) : (\r\n              <Alert variant='danger' className='mt-2'>\r\n                You can not take part this exam. Go to{' '}\r\n                <Link to='/exams'>avaiable exams </Link>\r\n              </Alert>\r\n            ))}\r\n          <div className='d-flex justify-content-around'>\r\n            <Link\r\n              className='text-white'\r\n              to={\r\n                courseId\r\n                  ? `/exams/${examId}_${courseId}`\r\n                  : isExamFree(categoryType)\r\n                  ? `/exams/free/${examId}`\r\n                  : ''\r\n              }\r\n            >\r\n              <Button\r\n                variant='outline-primary'\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                disabled={courseId ? false : !isExamFree(categoryType)}\r\n              >\r\n                <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n              </Button>\r\n            </Link>\r\n            {/* <Link className='text-white' to={'/result/rank/' + examId}>\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-dark'\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link> */}\r\n          </div>\r\n\r\n          <hr />\r\n          <SocialShare\r\n            url={'/exams/' + examId}\r\n            title={title}\r\n            description={description}\r\n          />\r\n\r\n          {canActivate(rolePermitted.coordinator, token) && (\r\n            <div className='mt-2'>\r\n              {editExam && (\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                  <EditExam\r\n                    editExam={editExam}\r\n                    editExamHandleClose={editExamHandleClose}\r\n                  />\r\n                </Suspense>\r\n              )}\r\n              <Button\r\n                variant='primary'\r\n                className='mr-3'\r\n                onClick={() => {\r\n                  setEditExam(true)\r\n                }}\r\n              >\r\n                Edit\r\n              </Button>\r\n\r\n              <OverlayTrigger\r\n                trigger='click'\r\n                placement='top'\r\n                overlay={\r\n                  <PopoverWrapper\r\n                    id={examId}\r\n                    res={res}\r\n                    setRes={setRes}\r\n                    token={token}\r\n                    examLoader={examLoader}\r\n                  />\r\n                }\r\n              >\r\n                <Button\r\n                  onClick={() => {\r\n                    dispatch(resetExamResultLoader())\r\n                  }}\r\n                  variant='danger'\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nconst PopoverWrapper = React.forwardRef(\r\n  ({ id, res, setRes, token, examLoader, ...props }, ref) => (\r\n    <Popover id='popover-basic' ref={ref} {...props}>\r\n      <Popover.Title as='h3'>Are You Sure To delete The Exam</Popover.Title>\r\n      <Popover.Content>\r\n        <p>{res}</p>\r\n        <Button\r\n          variant='danger'\r\n          onClick={() => {\r\n            //setAuthorizationToken(token);\r\n            axios({\r\n              baseURL: process.env.REACT_APP_SITE_URL,\r\n              url: '/exams/' + id,\r\n              method: 'delete'\r\n            })\r\n              .then((response) => {\r\n                examLoader()\r\n                setRes('Successfully Deleted')\r\n              })\r\n              .catch((error) => {\r\n                setRes('Can not delete the exam' + JSON.stringify(error))\r\n              })\r\n          }}\r\n        >\r\n          Yes\r\n        </Button>\r\n      </Popover.Content>\r\n    </Popover>\r\n  )\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, Col, Modal, Row } from 'react-bootstrap'\r\nimport { useIntl } from 'react-intl'\r\nimport { Link } from 'react-router-dom'\r\nimport ExamCard from './examCard'\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\nexport default function ListCard({ title, exams, landing, examLoader }) {\r\n  const intl = useIntl()\r\n\r\n  const [show, setShow] = useState(false)\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose} size={'xl'}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {intl.formatMessage({ id: 'btn.more', defaultMessage: 'More' })}\r\n            <Badge variant='warning'>{' ' + title.toUpperCase() + ' '}</Badge>\r\n            {intl.formatMessage({ id: 'btn.exams', defaultMessage: 'Exams' })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {\r\n            <Row className='mt-3 ml-3'>\r\n              <Col className='d-flex justify-content-center flex-wrap'>\r\n                {exams.slice(2).map((exam) => (\r\n                  <ExamCard\r\n                    key={exam.id}\r\n                    examId={exam.id}\r\n                    imgSrc={\r\n                      exam.categoryType.length > 0\r\n                        ? process.env.REACT_APP_SITE_URL +\r\n                          '/' +\r\n                          exam.categoryType[\r\n                            getRndInteger(0, exam.categoryType.length)\r\n                          ].imageUrl\r\n                        : '/assets/image/uncat.jpg'\r\n                    }\r\n                    title={exam.title}\r\n                    categoryType={\r\n                      exam.categoryType.length > 0\r\n                        ? exam.categoryType\r\n                        : [{ name: 'Uncategorized' }]\r\n                    }\r\n                    description={exam.description}\r\n                    createdAt={exam.createdAt}\r\n                    endDate={exam.endDate}\r\n                    free={\r\n                      exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                        .length > 0\r\n                    }\r\n                    examLoader={examLoader}\r\n                    landing={landing}\r\n                  />\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          }\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className='my-5 position-relative'>\r\n        <h3\r\n          className='text-center bg-warning text-light p-3 mx-auto'\r\n          style={{ maxWidth: '400px' }}\r\n        >\r\n          {title.toUpperCase() + ' '}{' '}\r\n          {!landing && (\r\n            <Badge variant='light' className='ml-2'>\r\n              {' '}\r\n              {exams.length}\r\n            </Badge>\r\n          )}{' '}\r\n        </h3>\r\n        <div className='mt-5'>\r\n          <div className='d-flex justify-content-around flex-wrap'>\r\n            {exams.length < 1 && (\r\n              <p className='lead text-danger'>\r\n                {' '}\r\n                {title +\r\n                  ' ' +\r\n                  intl.formatMessage({\r\n                    id: 'noExamCreated',\r\n                    defaultMessage: 'are not created'\r\n                  })}{' '}\r\n              </p>\r\n            )}\r\n            {exams.map((exam, i) => (\r\n              <ExamCard\r\n                key={exam.id}\r\n                examId={exam.id}\r\n                imgSrc={\r\n                  exam.categoryType.length > 0\r\n                    ? process.env.REACT_APP_SITE_URL +\r\n                      '/images/bootstrap/featured_0' +\r\n                      (Math.floor(Math.random() * 3) + 1) +\r\n                      '.svg'\r\n                    : process.env.REACT_APP_SITE_URL +\r\n                      '/images/bootstrap/uncat.svg'\r\n                }\r\n                title={exam.title}\r\n                categoryType={\r\n                  exam.categoryType.length > 0\r\n                    ? exam.categoryType\r\n                    : [{ name: 'Uncategorized' }]\r\n                }\r\n                description={exam.description}\r\n                createdAt={exam.startDate}\r\n                endDate={exam.endDate}\r\n                examLoader={examLoader}\r\n                landing={landing}\r\n              />\r\n            ))}\r\n          </div>\r\n          {landing ? (\r\n            <div className='d-flex justify-content-center'>\r\n              <Link to='/exams/category/Featured-2'>\r\n                <Button variant='warning' size='lg' className='text-white'>\r\n                  More Featured Exams...\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div className='my-2 d-flex justify-content-center'>\r\n              {exams.length > 2 ? (\r\n                <Button\r\n                  style={{ height: '50px', width: '150px' }}\r\n                  onClick={() => {\r\n                    handleShow()\r\n                  }}\r\n                >\r\n                  {intl.formatMessage({\r\n                    id: 'btn.more',\r\n                    defaultMessage: 'More...'\r\n                  })}\r\n                  .\r\n                </Button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport { connect } from 'react-redux'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport GallaryCard from '../../components/exams/gallary/gallaryCard'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { getAllExamsLoader } from '../../store/exams'\r\n\r\nexport const examType = [\r\n  'Assignment',\r\n  'Weekly',\r\n  'Monthly',\r\n  'Assesment',\r\n  'Term',\r\n  'Test',\r\n  'Final'\r\n]\r\n\r\nexport const examTypeBgColor = [\r\n  'primary',\r\n  'secondary',\r\n  'success',\r\n  'danger',\r\n  'warning',\r\n  'info',\r\n  'dark'\r\n]\r\n\r\nclass ExamLists extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetAllExamsLoader()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <MetaInfo {...RoutesConfig.Exams.metaInfo} />\r\n        {this.props.exams.exams.length < 1 && <CircleLoader />}\r\n        {Object.keys(this.props.exams.exams).map(\r\n          (key) =>\r\n            this.props.exams.exams[key] && (\r\n              <GallaryCard\r\n                key={key}\r\n                title={this.props.intl.formatMessage({\r\n                  id: key,\r\n                  defaultMessage: key\r\n                })}\r\n                exams={this.props.exams.exams[key]}\r\n                examLoader={this.props.onGetAllExamsLoader}\r\n              />\r\n            )\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetAllExamsLoader: () => dispatch(getAllExamsLoader())\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams\r\n  }\r\n}\r\n\r\nexport default injectIntl(\r\n  connect(mapStateToProps, mapDispatchToProps)(ExamLists)\r\n)\r\n"],"sourceRoot":""}