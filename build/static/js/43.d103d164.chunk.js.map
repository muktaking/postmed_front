{"version":3,"sources":["../node_modules/warning/warning.js","components/socialShare/socialShare.js","components/exams/gallary/examCatBadges.js","components/exams/gallary/examCard.js","components/exams/gallary/gallaryCard.js","container/landing/exam/exam.jsx"],"names":["warning","module","exports","iconStyle","SocialShare","title","description","url","props","process","className","variant","style","fontSize","quote","hashtag","size","round","body","source","ExamCatBadges","categoryType","map","category","key","name","pill","categoryTypeVariant","EditExam","React","lazy","isExamFree","filter","cat","length","ExamCard","width","height","examId","courseId","imgSrc","createdAt","endDate","examLoader","dispatch","useDispatch","token","useSelector","state","auth","intl","useIntl","useState","res","setRes","editExam","setEditExam","canActivate","rolePermitted","coordinator","Img","src","Body","Title","fontWeight","Subtitle","ct","formatMessage","id","defaultMessage","moment","format","to","onClick","resetExamResultLoader","disabled","fallback","editExamHandleClose","trigger","placement","overlay","PopoverWrapper","forwardRef","ref","as","Content","axios","baseURL","method","then","response","catch","error","JSON","stringify","getRndInteger","min","max","Math","floor","random","ListCard","exams","landing","show","setShow","handleClose","onHide","Header","closeButton","toUpperCase","slice","exam","imageUrl","free","Footer","maxWidth","i","startDate","Exam","loading","get","status","setState","data","e","console","log","this","animation","role","aria-hidden","Component","injectIntl"],"mappings":"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","file":"static/js/43.d103d164.chunk.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\nimport {\r\n  EmailIcon,\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n  LinkedinIcon,\r\n  LinkedinShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton\r\n} from 'react-share'\r\n\r\nconst iconStyle = {\r\n  size: 35,\r\n  round: true\r\n}\r\n\r\nexport default function SocialShare({ title, description, url, ...props }) {\r\n  url = process.env.REACT_APP_BASE_URL + url\r\n\r\n  return (\r\n    <div className='mt-3' {...props}>\r\n      <Badge\r\n        variant='success'\r\n        className='mr-1 p-1'\r\n        style={{ fontSize: '.8rem' }}\r\n      >\r\n        Share on\r\n      </Badge>\r\n\r\n      <FacebookShareButton\r\n        url={url}\r\n        quote={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <FacebookIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </FacebookShareButton>\r\n\r\n      <TwitterShareButton\r\n        url={url}\r\n        title={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <TwitterIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </TwitterShareButton>\r\n\r\n      <EmailShareButton\r\n        url={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <EmailIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </EmailShareButton>\r\n\r\n      <LinkedinShareButton\r\n        url={url}\r\n        source={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <LinkedinIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </LinkedinShareButton>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\n\r\nexport default function ExamCatBadges({ categoryType }) {\r\n  return (\r\n    categoryType &&\r\n    categoryType.map((category) => (\r\n      <Badge\r\n        key={category.name}\r\n        pill\r\n        variant={categoryTypeVariant(category.name)}\r\n        className='mr-1'\r\n      >\r\n        {category.name}\r\n      </Badge>\r\n    ))\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n","import axios from 'axios'\r\n//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { Suspense, useState } from 'react'\r\nimport { Alert, Button, Card, OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate'\r\nimport SocialShare from '../../socialShare/socialShare'\r\nimport ExamCatBadges from './examCatBadges'\r\nconst EditExam = React.lazy(() =>\r\n  import('../../../container/examBuilder/editExam')\r\n)\r\n\r\nfunction isExamFree(categoryType) {\r\n  return categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n}\r\n\r\nexport default function ExamCard({\r\n  width = '350',\r\n  height = '180',\r\n  examId,\r\n  courseId,\r\n  imgSrc,\r\n  title,\r\n  categoryType,\r\n  description,\r\n  createdAt,\r\n  endDate,\r\n  examLoader\r\n}) {\r\n  const dispatch = useDispatch()\r\n  const token = useSelector((state) => state.auth.token)\r\n  const intl = useIntl()\r\n  const [res, setRes] = useState(null)\r\n  const [editExam, setEditExam] = useState(false)\r\n\r\n  function editExamHandleClose() {\r\n    setEditExam(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card key={examId} className='mr-2 mb-2' style={{ width: width + 'px' }}>\r\n        <LazyLoadComponent>\r\n          {!canActivate(rolePermitted.coordinator, token) && (\r\n            <Card.Img\r\n              variant='top'\r\n              src={imgSrc}\r\n              width={width}\r\n              height={height}\r\n            />\r\n          )}\r\n        </LazyLoadComponent>\r\n        <Card.Body>\r\n          <div>\r\n            <Card.Title style={{ fontSize: '1.4rem', fontWeight: '900' }}>\r\n              {title}\r\n            </Card.Title>\r\n\r\n            <Card.Subtitle>\r\n              <ExamCatBadges\r\n                categoryType={\r\n                  token\r\n                    ? categoryType.filter((ct) => ct.name !== 'Free')\r\n                    : categoryType\r\n                }\r\n              />\r\n            </Card.Subtitle>\r\n          </div>\r\n\r\n          <div className='mt-1 pt-2'>\r\n            <p className=''>{description} </p>\r\n\r\n            <p className='text-right'>\r\n              <span className='text-muted'>\r\n                {intl.formatMessage({\r\n                  id: 'db.so',\r\n                  defaultMessage: 'Start on'\r\n                })}{' '}\r\n                : {moment(createdAt).format('YYYY-MMM-DD hh:mm A')}\r\n              </span>\r\n              <br />\r\n              {\r\n                <span className='text-danger'>\r\n                  {intl.formatMessage({\r\n                    id: 'db.eo',\r\n                    defaultMessage: 'Ends on'\r\n                  })}{' '}\r\n                  : {moment(endDate).format('YYYY-MMM-DD hh:mm A')}\r\n                </span>\r\n              }\r\n            </p>\r\n          </div>\r\n\r\n          <div className='d-flex justify-content-around'>\r\n            <Link\r\n              className='text-white'\r\n              to={\r\n                courseId\r\n                  ? `/exams/${examId}_${courseId}`\r\n                  : isExamFree(categoryType)\r\n                  ? `/exams/free/${examId}`\r\n                  : ''\r\n              }\r\n            >\r\n              <Button\r\n                variant='outline-primary'\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                disabled={!isExamFree(categoryType)}\r\n              >\r\n                <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n              </Button>\r\n            </Link>\r\n            <Link className='text-white' to={'/result/rank/' + examId}>\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-dark'\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n          {token &&\r\n            (isExamFree(categoryType) ? (\r\n              <Alert variant='warning' className='mt-2'>\r\n                Taking part to this exam will not be added to your exam profile.{' '}\r\n              </Alert>\r\n            ) : (\r\n              <Alert variant='danger' className='mt-2'>\r\n                You can not take part this exam. Go to{' '}\r\n                <Link to='/exams'>avaiable exams </Link>\r\n              </Alert>\r\n            ))}\r\n          <SocialShare\r\n            url={'/exams/' + examId}\r\n            title={title}\r\n            description={description}\r\n          />\r\n\r\n          {canActivate(rolePermitted.coordinator, token) && (\r\n            <div className='mt-2'>\r\n              {editExam && (\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                  <EditExam\r\n                    editExam={editExam}\r\n                    editExamHandleClose={editExamHandleClose}\r\n                  />\r\n                </Suspense>\r\n              )}\r\n              <Button\r\n                variant='primary'\r\n                className='mr-3'\r\n                onClick={() => {\r\n                  setEditExam(true)\r\n                }}\r\n              >\r\n                Edit\r\n              </Button>\r\n\r\n              <OverlayTrigger\r\n                trigger='click'\r\n                placement='top'\r\n                overlay={\r\n                  <PopoverWrapper\r\n                    id={examId}\r\n                    res={res}\r\n                    setRes={setRes}\r\n                    token={token}\r\n                    examLoader={examLoader}\r\n                  />\r\n                }\r\n              >\r\n                <Button\r\n                  onClick={() => {\r\n                    dispatch(resetExamResultLoader())\r\n                  }}\r\n                  variant='danger'\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nconst PopoverWrapper = React.forwardRef(\r\n  ({ id, res, setRes, token, examLoader, ...props }, ref) => (\r\n    <Popover id='popover-basic' ref={ref} {...props}>\r\n      <Popover.Title as='h3'>Are You Sure To delete The Exam</Popover.Title>\r\n      <Popover.Content>\r\n        <p>{res}</p>\r\n        <Button\r\n          variant='danger'\r\n          onClick={() => {\r\n            //setAuthorizationToken(token);\r\n            axios({\r\n              baseURL: process.env.REACT_APP_SITE_URL,\r\n              url: '/exams/' + id,\r\n              method: 'delete'\r\n            })\r\n              .then((response) => {\r\n                examLoader()\r\n                setRes('Successfully Deleted')\r\n              })\r\n              .catch((error) => {\r\n                setRes('Can not delete the exam' + JSON.stringify(error))\r\n              })\r\n          }}\r\n        >\r\n          Yes\r\n        </Button>\r\n      </Popover.Content>\r\n    </Popover>\r\n  )\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, Col, Modal, Row } from 'react-bootstrap'\r\nimport { useIntl } from 'react-intl'\r\nimport ExamCard from './examCard'\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\nexport default function ListCard({ title, exams, landing, examLoader }) {\r\n  const intl = useIntl()\r\n\r\n  const [show, setShow] = useState(false)\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose} size={'xl'}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {intl.formatMessage({ id: 'btn.more', defaultMessage: 'More' })}\r\n            <Badge variant='warning'>{' ' + title.toUpperCase() + ' '}</Badge>\r\n            {intl.formatMessage({ id: 'btn.exams', defaultMessage: 'Exams' })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {\r\n            <Row className='mt-3 ml-3'>\r\n              <Col className='d-flex justify-content-center flex-wrap'>\r\n                {exams.slice(2).map((exam) => (\r\n                  <ExamCard\r\n                    key={exam.id}\r\n                    examId={exam.id}\r\n                    imgSrc={\r\n                      exam.categoryType.length > 0\r\n                        ? process.env.REACT_APP_SITE_URL +\r\n                          '/' +\r\n                          exam.categoryType[\r\n                            getRndInteger(0, exam.categoryType.length)\r\n                          ].imageUrl\r\n                        : '/assets/image/uncat.jpg'\r\n                    }\r\n                    title={exam.title}\r\n                    categoryType={\r\n                      exam.categoryType.length > 0\r\n                        ? exam.categoryType\r\n                        : [{ name: 'Uncategorized' }]\r\n                    }\r\n                    description={exam.description}\r\n                    createdAt={exam.createdAt}\r\n                    endDate={exam.endDate}\r\n                    free={\r\n                      exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                        .length > 0\r\n                    }\r\n                    examLoader={examLoader}\r\n                  />\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          }\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className='my-5 position-relative'>\r\n        <h3\r\n          className='text-center bg-warning text-light p-3 mx-auto'\r\n          style={{ maxWidth: '400px' }}\r\n        >\r\n          {title.toUpperCase() + ' '}{' '}\r\n          {!landing && (\r\n            <Badge variant='light' className='ml-2'>\r\n              {' '}\r\n              {exams.length}\r\n            </Badge>\r\n          )}{' '}\r\n        </h3>\r\n        <div className='mt-5'>\r\n          <div className='d-flex justify-content-around flex-wrap'>\r\n            {exams.length < 1 && (\r\n              <p className='lead text-danger'>\r\n                {' '}\r\n                {title +\r\n                  ' ' +\r\n                  intl.formatMessage({\r\n                    id: 'noExamCreated',\r\n                    defaultMessage: 'are not created'\r\n                  })}{' '}\r\n              </p>\r\n            )}\r\n            {exams.map((exam, i) =>\r\n              i < 3 ? (\r\n                <ExamCard\r\n                  key={exam.id}\r\n                  examId={exam.id}\r\n                  imgSrc={\r\n                    exam.categoryType.length > 0\r\n                      ? process.env.REACT_APP_SITE_URL +\r\n                        '/' +\r\n                        exam.categoryType[\r\n                          getRndInteger(0, exam.categoryType.length)\r\n                        ].imageUrl\r\n                      : '/assets/image/uncat.jpg'\r\n                  }\r\n                  title={exam.title}\r\n                  categoryType={\r\n                    exam.categoryType.length > 0\r\n                      ? exam.categoryType\r\n                      : [{ name: 'Uncategorized' }]\r\n                  }\r\n                  description={exam.description}\r\n                  createdAt={exam.startDate}\r\n                  endDate={exam.endDate}\r\n                  examLoader={examLoader}\r\n                  landing={landing}\r\n                />\r\n              ) : (\r\n                ''\r\n              )\r\n            )}\r\n          </div>\r\n          {!landing && (\r\n            <div className='my-2 d-flex justify-content-center'>\r\n              {exams.length > 2 ? (\r\n                <Button\r\n                  style={{ height: '50px', width: '150px' }}\r\n                  onClick={() => {\r\n                    handleShow()\r\n                  }}\r\n                >\r\n                  {intl.formatMessage({\r\n                    id: 'btn.more',\r\n                    defaultMessage: 'More...'\r\n                  })}\r\n                  .\r\n                </Button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { Component } from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport { injectIntl } from 'react-intl'\r\nimport GallaryCard from '../../../components/exams/gallary/gallaryCard'\r\n//import \"./exam.scss\";\r\n\r\nclass Exam extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      loading: true,\r\n      exams: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/featured')\r\n      .then((res) => {\r\n        if (res.status === 200)\r\n          this.setState({ exams: res.data, loading: false })\r\n      })\r\n      .catch((e) => {\r\n        this.setState({ loading: false })\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='exam' className='mb-5 offset'>\r\n        {this.state.loading ? (\r\n          <div className='text-center'>\r\n            <span>Please wait. Featured exams are loading </span>\r\n            <Spinner\r\n              as='span'\r\n              animation='grow'\r\n              role='status'\r\n              aria-hidden='true'\r\n              variant='dark'\r\n              size='md'\r\n            />\r\n          </div>\r\n        ) : (\r\n          <GallaryCard\r\n            title={this.props.intl.formatMessage({\r\n              id: 'db.fe',\r\n              defaultMessage: 'Our Featured Exams'\r\n            })}\r\n            exams={this.state.exams}\r\n            landing={true}\r\n          />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default injectIntl(Exam)\r\n"],"sourceRoot":""}