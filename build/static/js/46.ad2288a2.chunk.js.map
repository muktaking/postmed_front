{"version":3,"sources":["components/exams/gallary/examCatBadges.js","container/exams/component/examByCat.js","container/exams/examListsByCatShower.js"],"names":["ExamCatBadges","categoryType","map","category","key","name","pill","variant","categoryTypeVariant","className","duration","require","relativeTime","ExamByCat","exam","courseId","dispatch","useDispatch","coursesEnrolledByStu","useSelector","state","courses","useEffect","fetchCourseEnrolledByStuLoader","isFree","filter","cat","length","isEnrolledStu","course","id","indexOf","sm","title","examTypeToString","type","size","description","to","onClick","resetExamResultLoader","disabled","defaultMessage","moment","startDate","fromNow","ExamListsByCatShower","useParams","idA","split","useState","exams","setExams","loading","setLoading","axios","get","process","then","response","data","catch","e","console","log","style","width"],"mappings":"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","file":"static/js/46.ad2288a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\n\r\nexport default function ExamCatBadges({ categoryType }) {\r\n  return (\r\n    categoryType &&\r\n    categoryType.map((category) => (\r\n      <Badge\r\n        key={category.name}\r\n        pill\r\n        variant={categoryTypeVariant(category.name)}\r\n        className='mr-1'\r\n      >\r\n        {category.name}\r\n      </Badge>\r\n    ))\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n","//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { useEffect } from 'react'\r\nimport { Badge, Button, Col } from 'react-bootstrap'\r\nimport { BsFileText } from 'react-icons/bs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport ExamCatBadges from '../../../components/exams/gallary/examCatBadges'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { examTypeToString } from '../../../utils/faculty'\r\nimport { fetchCourseEnrolledByStuLoader } from '../../../store/courses'\r\nimport { FaLock } from 'react-icons/fa'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nexport default function ExamByCat({ exam, courseId = null }) {\r\n  const dispatch = useDispatch()\r\n  const coursesEnrolledByStu = useSelector(\r\n    (state) => state.courses.coursesEnrolledByStu\r\n  )\r\n  useEffect(() => {\r\n    dispatch(fetchCourseEnrolledByStuLoader())\r\n  }, [dispatch])\r\n\r\n  const isFree =\r\n    exam.categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n  const isEnrolledStu =\r\n    coursesEnrolledByStu.map((course) => course.id).indexOf(+courseId) !== -1\r\n  return (\r\n    <>\r\n      <Col sm={12}>\r\n        <h4 className=''>\r\n          {/* <BsLayersFill size='1.5rem' /> */}\r\n          <span className=''>{exam.title}</span>\r\n        </h4>\r\n        <div className='d-flex justify-content-between'>\r\n          <div>\r\n            <ExamCatBadges categoryType={exam.categoryType} />\r\n            <span>{!isEnrolledStu && !isFree && <FaLock />}</span>\r\n          </div>\r\n          <div>\r\n            <Badge variant='dark' className='px-2 py-1'>\r\n              {examTypeToString(exam.type)}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </Col>\r\n      <Col sm={12} className='mt-1'>\r\n        <p className=''>\r\n          <BsFileText size='1.5rem' className='m-1' />\r\n          <span className='ml-2'>{exam.description}</span>\r\n        </p>\r\n        {/* <p className='text-right'>\r\n          End on:{' '}\r\n          <Badge className='ml-2' variant='danger'>\r\n            {moment(exam.endDate).format('DD-MMM-YYYY hh:mm A')}\r\n          </Badge>\r\n        </p> */}\r\n        {/* <Badge variant='light' className='mt-3'>\r\n          {!authToken &&\r\n            exam.categoryType.filter((cat) => cat.name === 'Free').length > 0 &&\r\n            'Free'}\r\n        </Badge> */}\r\n        <hr />\r\n        <div className='d-flex justify-content-center'>\r\n          <Link\r\n            className='text-white'\r\n            // First get array of coursesEnrolledByStuIds, then finds in them the course id\r\n            // , then check the free status\r\n            to={\r\n              isEnrolledStu\r\n                ? '/exams/' + exam.id + '_' + courseId\r\n                : isFree\r\n                ? '/exams/free/' + exam.id\r\n                : '/exams/' + exam.id\r\n            }\r\n          >\r\n            <Button\r\n              variant='outline-primary'\r\n              onClick={() => {\r\n                dispatch(resetExamResultLoader())\r\n              }}\r\n              disabled={!isEnrolledStu && !isFree}\r\n            >\r\n              <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n            </Button>\r\n          </Link>\r\n          {courseId && (\r\n            <Link\r\n              className='text-white'\r\n              to={'/result/rank/' + (courseId + '_' + exam.id)}\r\n            >\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-primary'\r\n                className='ml-2'\r\n                disabled={!isEnrolledStu && !isFree}\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link>\r\n          )}\r\n        </div>\r\n        <hr />\r\n        <p className='text-center text-muted'>\r\n          Start: {moment(exam.startDate).fromNow()}\r\n        </p>\r\n      </Col>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge, Row } from 'react-bootstrap'\r\nimport { useParams } from 'react-router'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport ExamByCat from './component/examByCat'\r\n\r\nexport default function ExamListsByCatShower() {\r\n  const { id } = useParams()\r\n  let [name, idA] = [null, null]\r\n  if (id) [name, idA] = id.split('-')\r\n  const [exams, setExams] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/category/' + idA)\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setExams(response.data)\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false)\r\n        console.log(e)\r\n      })\r\n  }, [idA])\r\n  return (\r\n    <div className=''>\r\n      {loading && <CircleLoader />}\r\n      <h2 className='text-center'>\r\n        <span className='mr-2'>Available Exams Under</span>\r\n        <Badge variant='warning'>{name}</Badge>\r\n      </h2>\r\n      {!loading && (\r\n        <p className='text-center text-danger'>\r\n          {exams.length < 1 && 'NO Exam is avaiable.'}\r\n        </p>\r\n      )}\r\n      <div className='d-flex justify-content-center flex-wrap'>\r\n        {exams.map((exam) => (\r\n          <Row\r\n            key={exam.title}\r\n            className='m-2 py-3 pl-2 border border-secondary' // bg-secondary text-white\r\n            style={{ width: '350px' }}\r\n          >\r\n            <ExamByCat exam={exam} />\r\n          </Row>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}