{"version":3,"sources":["container/courses/index.js","container/exams/examListByCourse.js"],"names":["duration","require","relativeTime","moment","styles","position","top","right","zIndex","Index","landing","dispatch","useDispatch","coursesStore","useSelector","state","courses","isAuthenticated","auth","token","useState","enrollResLoader","setEnrollResLoader","res","setRes","showModalMsg","setShowModalMsg","filter","course","id","useEffect","courseResetLoader","fetchCourseLoader","handleModalClose","RoutesConfig","Course","metaInfo","show","onHide","Header","closeButton","Title","Body","remarkPlugins","remarkGfm","Footer","variant","onClick","onClose","style","className","src","alt","loading","error","map","width","Img","imageUrl","process","to","fontSize","fontWeight","title","Text","description","substring","size","price","endDate","diff","startDate","humanize","height","axios","baseURL","url","method","then","response","data","message","catch","fromNow","length","ExamListsByCat","fetchCourseEnrolledByStuLoader","coursesEnrolledByStu","isAfter","Exams"],"mappings":"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","file":"static/js/50.697dec73.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport * as moment from 'dayjs'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge, Button, Card, Modal, Toast } from 'react-bootstrap'\r\nimport { FaCalendarAlt, FaMoneyCheckAlt } from 'react-icons/fa'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport remarkGfm from 'remark-gfm'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport RedFillLoader from '../../components/customSpinner/redFillLoader/redFillLoader'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport SocialShare from '../../components/socialShare/socialShare'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { courseResetLoader, fetchCourseLoader } from '../../store/courses'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\n//styles to show toast message\r\nconst styles = {\r\n  position: 'fixed',\r\n  top: '70px',\r\n  right: '10px',\r\n  zIndex: 100\r\n}\r\n\r\n/**\r\n *\r\n * @param {landing} dentotes landing page is or not; boolean\r\n * @returns nothing\r\n */\r\nexport default function Index({ landing = null }) {\r\n  const dispatch = useDispatch()\r\n  const coursesStore = useSelector((state) => state.courses)\r\n  const isAuthenticated = useSelector((state) => state.auth.token !== null)\r\n  const [enrollResLoader, setEnrollResLoader] = useState(false)\r\n  const [res, setRes] = useState(null) // get server response after enrollment request by student\r\n  const [showModalMsg, setShowModalMsg] = useState(null) // show modal\r\n  let courses = coursesStore\r\n    ? landing\r\n      ? coursesStore.courses.filter((course, id) => id < 3)\r\n      : coursesStore.courses\r\n    : []\r\n\r\n  useEffect(() => {\r\n    dispatch(courseResetLoader()) // reset course error msg\r\n    dispatch(fetchCourseLoader()) // fetch courses\r\n  }, [dispatch])\r\n\r\n  const handleClose = () => {\r\n    setRes(null)\r\n  }\r\n\r\n  const handleModalClose = () => {\r\n    setShowModalMsg(null)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* SEO section */}\r\n      {!landing && <MetaInfo {...RoutesConfig.Course.metaInfo} />}\r\n\r\n      {/* Modal section --> shows details of a course after clicking 'More' button */}\r\n      <Modal show={showModalMsg} onHide={handleModalClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n            {showModalMsg}\r\n          </ReactMarkdown>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary ' onClick={handleModalClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Toast section --> shows server response after enrollment request */}\r\n      <Toast show={res} onClose={handleClose} style={styles}>\r\n        <Toast.Header className='bg-warning text-white'>\r\n          <img src='holder.js/20x20?text=%20' className='rounded me-2' alt='' />\r\n          <strong className='me-auto'>Server Response</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>{res}</Toast.Body>\r\n      </Toast>\r\n\r\n      {/* Main Section */}\r\n      <h3 className='text-center heading'>Available Courses</h3>\r\n      {landing && <div className='heading-underline'></div>}\r\n      {enrollResLoader && <CircleLoader />}\r\n      {coursesStore.loading &&\r\n        (landing ? ( //show different preloader based on landing page\r\n          <div className='text-center'>\r\n            <span>Please wait. Courses are </span>\r\n            <RedFillLoader />\r\n          </div>\r\n        ) : (\r\n          <CircleLoader />\r\n        ))}\r\n      <div className='d-flex justify-content-around flex-wrap'>\r\n        {coursesStore.error ? ( // show courses error messsage\r\n          <p className='text-danger'>\r\n            <span>Courses can not be retrived.</span>\r\n            {!landing && (\r\n              <>\r\n                <hr />\r\n                <span>Possible Reason: {coursesStore.error}</span>{' '}\r\n              </>\r\n            )}\r\n          </p>\r\n        ) : (\r\n          courses.map((course) => (\r\n            <Card className='my-3' style={{ width: '350px' }}>\r\n              <LazyLoadComponent>\r\n                <Card.Img\r\n                  variant='top'\r\n                  src={\r\n                    course.imageUrl\r\n                      ? `${process.env.REACT_APP_SITE_URL}/${course.imageUrl}`\r\n                      : `${process.env.REACT_APP_SITE_URL}/images/courses/index.png`\r\n                  }\r\n                />\r\n              </LazyLoadComponent>\r\n              <Card.Body>\r\n                <Link to={`/courses/${course.id}`}>\r\n                  <Card.Title style={{ fontSize: '1.4rem', fontWeight: '900' }}>\r\n                    {course.title}\r\n                  </Card.Title>\r\n                </Link>\r\n                <Card.Text>\r\n                  <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n                    {course.description.substring(0, 250) + ' ...'}\r\n                  </ReactMarkdown>\r\n                  <p className='text-center'>\r\n                    <Button\r\n                      variant='outline-primary'\r\n                      onClick={() => {\r\n                        setShowModalMsg(course.description)\r\n                      }}\r\n                    >\r\n                      More\r\n                    </Button>\r\n                  </p>\r\n                </Card.Text>\r\n                <Card.Text className='d-flex justify-content-between'>\r\n                  <div>\r\n                    <FaMoneyCheckAlt size='1.5rem' />{' '}\r\n                    <span className='bg-info text-white px-3 py-1'>\r\n                      {course.price ? course.price + ' Taka' : 'Free'}\r\n                    </span>\r\n                  </div>\r\n                  <div>\r\n                    <FaCalendarAlt size='1.5rem' />{' '}\r\n                    <span className='bg-secondary text-white px-3 py-1'>\r\n                      {moment\r\n                        .duration(moment(course.endDate).diff(course.startDate))\r\n                        .humanize() + ' long.'}\r\n                    </span>\r\n                  </div>\r\n                </Card.Text>\r\n                <Card.Text className='text-center mt-2'>\r\n                  <Link to={'/exams/courses/' + course.id}>\r\n                    <Button variant='primary'>Go to Exams</Button>\r\n                  </Link>\r\n                </Card.Text>\r\n                {/* {isAuthenticated && (\r\n                  \r\n                )} */}\r\n                <hr />\r\n                <div className='d-flex justify-content-center align-items-center'>\r\n                  {isAuthenticated ? (\r\n                    <Button\r\n                      variant='primary'\r\n                      //size='lg'\r\n                      //className='px-5'\r\n                      style={{\r\n                        width: '300px',\r\n                        height: '55px',\r\n                        fontSize: '18px'\r\n                      }}\r\n                      onClick={() => {\r\n                        //setAuthorizationToken(token);\r\n                        setEnrollResLoader(true)\r\n                        axios({\r\n                          baseURL: process.env.REACT_APP_SITE_URL,\r\n                          url: '/courses/enroll/' + course.id,\r\n                          method: 'patch'\r\n                        })\r\n                          .then((response) => {\r\n                            setEnrollResLoader(false)\r\n                            setRes(response.data.message)\r\n                          })\r\n                          .catch((error) => {\r\n                            setEnrollResLoader(false)\r\n                            setRes(\r\n                              'Sorry. Enrollment to this course is not possible due to server error. Please contact with admin.'\r\n                            )\r\n                          })\r\n                      }}\r\n                    >\r\n                      Enroll\r\n                    </Button>\r\n                  ) : (\r\n                    <Link to={'/login'}>\r\n                      <Badge variant='warning' className='p-2'>\r\n                        Please Login to Enroll.\r\n                      </Badge>\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n                <hr />\r\n                <Card.Text className='text-muted text-center'>\r\n                  <span>Start: {moment(course.startDate).fromNow()}</span>\r\n                </Card.Text>\r\n              </Card.Body>\r\n              <Card.Footer>\r\n                <SocialShare\r\n                  title={course.title}\r\n                  description={course.description}\r\n                  url=''\r\n                />\r\n              </Card.Footer>\r\n            </Card>\r\n          ))\r\n        )}\r\n      </div>\r\n      {landing && coursesStore.courses.length > 3 && (\r\n        <div className='d-flex justify-content-center'>\r\n          <Link to='/courses'>\r\n            <Button variant='warning' size='xl' className='text-white'>\r\n              More Ongoing Courses...\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { useEffect } from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { fetchCourseEnrolledByStuLoader } from '../../store/courses'\r\nimport CoursesComponent from '../courses/'\r\n\r\nexport default function ExamListsByCat() {\r\n  const dispatch = useDispatch()\r\n  const courses = useSelector((state) => state.courses)\r\n  const token = useSelector((state) => state.auth.token)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCourseEnrolledByStuLoader())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div>\r\n      {courses.loading && <CircleLoader />}\r\n      <h2 className='text-center'>Enrolled Courses</h2>\r\n      <div className='m-3 d-flex justify-content-center flex-wrap'>\r\n        {courses && courses.coursesEnrolledByStu.length < 1 ? (\r\n          <div>\r\n            <p className='text-center text-danger'>\r\n              You have not enrolled for any course yet. Please enroll for course\r\n              first.\r\n            </p>\r\n            <CoursesComponent />\r\n          </div>\r\n        ) : (\r\n          courses.coursesEnrolledByStu.map((course) => (\r\n            <div\r\n              className='mt-3 mr-3 p-3 bg-dark text-white'\r\n              style={{ width: '250px' }}\r\n            >\r\n              <p className='lead text-center'>{course.title}</p>\r\n              <p className='mt-2 text-center'>\r\n                {moment().isAfter(course.endDate) ? (\r\n                  <Badge variant='danger' className='p-2'>\r\n                    This Course is ended\r\n                  </Badge>\r\n                ) : (\r\n                  <Link to={'/exams/courses/' + course.id}>\r\n                    <Badge variant='light' className='p-2'>\r\n                      Go to Exams\r\n                    </Badge>\r\n                  </Link>\r\n                )}\r\n              </p>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <MetaInfo {...RoutesConfig.Exams.metaInfo} />\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}