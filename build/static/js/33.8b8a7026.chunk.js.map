{"version":3,"sources":["components/exams/gallary/examCard.js","components/exams/gallary/gallaryCard.js","container/landing/exam/exam.jsx"],"names":["iconStyle","SocialShare","title","description","url","props","process","className","variant","style","fontSize","quote","hashtag","size","round","body","source","categoryTypeVariant","name","ExamCard","width","height","examId","imgSrc","categoryType","createdAt","free","examLoader","dispatch","useDispatch","token","useSelector","state","auth","intl","useIntl","useState","res","setRes","key","canActivate","rolePermitted","admin","Img","src","Body","Title","fontWeight","Subtitle","map","category","formatMessage","id","defaultMessage","moment","calendar","to","onClick","resetExamResultLoader","disabled","trigger","placement","overlay","PopoverWrapper","React","forwardRef","ref","as","Content","axios","baseURL","method","then","response","catch","error","JSON","stringify","getRndInteger","min","max","Math","floor","random","ListCard","exams","landing","authToken","show","setShow","handleClose","onHide","Header","closeButton","toUpperCase","slice","exam","length","imageUrl","filter","cat","Footer","marginTop","position","top","left","i","Exam","get","status","setState","data","e","console","log","this","Component","injectIntl"],"mappings":"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","file":"static/js/33.8b8a7026.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useState } from 'react'\r\nimport { Badge, Button, Card, OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  EmailIcon,\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n  LinkedinIcon,\r\n  LinkedinShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton\r\n} from 'react-share'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate'\r\n\r\nconst iconStyle = {\r\n  size: 35,\r\n  round: true\r\n}\r\n\r\nconst SocialShare = ({ title, description, url, ...props }) => {\r\n  url = process.env.REACT_APP_BASE_URL + url\r\n\r\n  return (\r\n    <div className='mt-3' {...props}>\r\n      <hr />\r\n\r\n      <Badge\r\n        variant='success'\r\n        className='mr-1 p-1'\r\n        style={{ fontSize: '.8rem' }}\r\n      >\r\n        Share on\r\n      </Badge>\r\n\r\n      <FacebookShareButton\r\n        url={url}\r\n        quote={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <FacebookIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </FacebookShareButton>\r\n\r\n      <TwitterShareButton\r\n        url={url}\r\n        title={description}\r\n        hashtag={title}\r\n        className='mr-1'\r\n      >\r\n        <TwitterIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </TwitterShareButton>\r\n\r\n      <EmailShareButton\r\n        url={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <EmailIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </EmailShareButton>\r\n\r\n      <LinkedinShareButton\r\n        url={url}\r\n        source={url}\r\n        body={description}\r\n        title={title}\r\n        className='mr-1'\r\n      >\r\n        <LinkedinIcon size={iconStyle.size} round={iconStyle.round} />\r\n      </LinkedinShareButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n\r\nexport default function ExamCard({\r\n  width = '350',\r\n  height = '180',\r\n  examId,\r\n  imgSrc,\r\n  title,\r\n  categoryType,\r\n  description,\r\n  createdAt,\r\n  free,\r\n  examLoader\r\n}) {\r\n  const dispatch = useDispatch()\r\n  const token = useSelector((state) => state.auth.token)\r\n  const intl = useIntl()\r\n  const [res, setRes] = useState(null)\r\n\r\n  return (\r\n    <>\r\n      <Card key={examId} className='mr-2 mb-2' style={{ width: width + 'px' }}>\r\n        {!canActivate(rolePermitted.admin, token) && (\r\n          <Card.Img variant='top' src={imgSrc} width={width} height={height} />\r\n        )}\r\n        <Card.Body>\r\n          <div>\r\n            <Card.Title style={{ fontSize: '1.4rem', fontWeight: '900' }}>\r\n              {title}\r\n            </Card.Title>\r\n\r\n            <Card.Subtitle>\r\n              {categoryType &&\r\n                categoryType.map((category) => (\r\n                  <Badge\r\n                    key={category.name}\r\n                    variant={categoryTypeVariant(category.name)}\r\n                    className='mr-1'\r\n                  >\r\n                    {category.name}\r\n                  </Badge>\r\n                ))}\r\n            </Card.Subtitle>\r\n          </div>\r\n\r\n          <div className='mt-1 pt-2'>\r\n            <p className=''>{description} </p>\r\n\r\n            <p className='text-muted text-right'>\r\n              {intl.formatMessage({ id: 'db.so', defaultMessage: 'Start on' })}{' '}\r\n              : {moment(createdAt).calendar()}\r\n            </p>\r\n          </div>\r\n\r\n          {!canActivate(rolePermitted.admin, token) && (\r\n            <>\r\n              <div className='d-flex justify-content-around'>\r\n                <Link\r\n                  className='text-white'\r\n                  to={(free ? '/exams/free/' : '/exams/') + examId}\r\n                >\r\n                  <Button\r\n                    variant='outline-primary'\r\n                    onClick={() => {\r\n                      dispatch(resetExamResultLoader())\r\n                    }}\r\n                  >\r\n                    <FormattedMessage\r\n                      id='btn.start'\r\n                      defaultMessage='Start Exam'\r\n                    />\r\n                  </Button>\r\n                </Link>\r\n                <Link className='text-white' to={'/result/rank/' + examId}>\r\n                  <Button\r\n                    onClick={() => {\r\n                      dispatch(resetExamResultLoader())\r\n                    }}\r\n                    variant='outline-dark'\r\n                  >\r\n                    <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              <SocialShare\r\n                url={'/exams/' + examId}\r\n                title={title}\r\n                description={description}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {canActivate(rolePermitted.admin, token) && (\r\n            <div>\r\n              <Button disabled={true} variant='primary' className='mr-3'>\r\n                Edit\r\n              </Button>\r\n              <OverlayTrigger\r\n                trigger='click'\r\n                placement='top'\r\n                overlay={\r\n                  <PopoverWrapper\r\n                    id={examId}\r\n                    res={res}\r\n                    setRes={setRes}\r\n                    token={token}\r\n                    examLoader={examLoader}\r\n                  />\r\n                }\r\n              >\r\n                <Button\r\n                  onClick={() => {\r\n                    dispatch(resetExamResultLoader())\r\n                  }}\r\n                  variant='danger'\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nconst PopoverWrapper = React.forwardRef(\r\n  ({ id, res, setRes, token, examLoader, ...props }, ref) => (\r\n    <Popover id='popover-basic' ref={ref} {...props}>\r\n      <Popover.Title as='h3'>Are You Sure To delete The Exam</Popover.Title>\r\n      <Popover.Content>\r\n        <p>{res}</p>\r\n        <Button\r\n          variant='danger'\r\n          onClick={() => {\r\n            //setAuthorizationToken(token);\r\n            axios({\r\n              baseURL: process.env.REACT_APP_SITE_URL,\r\n              url: '/exams/' + id,\r\n              method: 'delete'\r\n            })\r\n              .then((response) => {\r\n                examLoader()\r\n                setRes('Successfully Deleted')\r\n              })\r\n              .catch((error) => {\r\n                setRes('Can not delete the exam' + JSON.stringify(error))\r\n              })\r\n          }}\r\n        >\r\n          Yes\r\n        </Button>\r\n      </Popover.Content>\r\n    </Popover>\r\n  )\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, Col, Modal, Row } from 'react-bootstrap'\r\nimport { useIntl } from 'react-intl'\r\nimport { useSelector } from 'react-redux'\r\nimport ExamCard from './examCard'\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\nexport default function ListCard({ title, exams, landing, examLoader }) {\r\n  const authToken = useSelector((state) => (state.auth.token ? true : false))\r\n  const intl = useIntl()\r\n\r\n  const [show, setShow] = useState(false)\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose} size={'xl'}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {intl.formatMessage({ id: 'btn.more', defaultMessage: 'More' })}\r\n            <Badge variant='warning'>{' ' + title.toUpperCase() + ' '}</Badge>\r\n            {intl.formatMessage({ id: 'btn.exams', defaultMessage: 'Exams' })}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {\r\n            <Row className='mt-3 ml-3'>\r\n              <Col className='d-flex justify-content-center flex-wrap'>\r\n                {exams.slice(2).map((exam) => (\r\n                  <ExamCard\r\n                    key={exam.id}\r\n                    examId={exam.id}\r\n                    imgSrc={\r\n                      exam.categoryType.length > 0\r\n                        ? process.env.REACT_APP_SITE_URL +\r\n                          '/' +\r\n                          exam.categoryType[\r\n                            getRndInteger(0, exam.categoryType.length)\r\n                          ].imageUrl\r\n                        : '/assets/image/uncat.jpg'\r\n                    }\r\n                    title={exam.title}\r\n                    categoryType={\r\n                      exam.categoryType.length > 0\r\n                        ? exam.categoryType\r\n                        : [{ name: 'Uncategorized' }]\r\n                    }\r\n                    description={exam.description}\r\n                    createdAt={exam.createdAt}\r\n                    free={\r\n                      !authToken &&\r\n                      exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                        .length > 0\r\n                    }\r\n                    examLoader={examLoader}\r\n                  />\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          }\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div\r\n        className='mb-2 border position-relative'\r\n        style={{ marginTop: '100px' }}\r\n      >\r\n        <h3\r\n          className='text-center bg-warning text-light px-2 py-1'\r\n          style={{ position: 'absolute', top: '-30px', left: '50px' }}\r\n        >\r\n          {title.toUpperCase() + ' '}{' '}\r\n          {!landing && (\r\n            <Badge variant='light' className='ml-2'>\r\n              {' '}\r\n              {exams.length}\r\n            </Badge>\r\n          )}{' '}\r\n        </h3>\r\n        <div className='mt-4'>\r\n          <div className='d-flex justify-content-around flex-wrap'>\r\n            {exams.length < 1 && (\r\n              <p className='lead text-danger'>\r\n                {' '}\r\n                {title +\r\n                  ' ' +\r\n                  intl.formatMessage({\r\n                    id: 'noExamCreated',\r\n                    defaultMessage: 'Exams is not created'\r\n                  })}{' '}\r\n              </p>\r\n            )}\r\n            {exams.map((exam, i) =>\r\n              i < 3 ? (\r\n                <ExamCard\r\n                  key={exam.id}\r\n                  examId={exam.id}\r\n                  imgSrc={\r\n                    exam.categoryType.length > 0\r\n                      ? process.env.REACT_APP_SITE_URL +\r\n                        '/' +\r\n                        exam.categoryType[\r\n                          getRndInteger(0, exam.categoryType.length)\r\n                        ].imageUrl\r\n                      : '/assets/image/uncat.jpg'\r\n                  }\r\n                  title={exam.title}\r\n                  categoryType={\r\n                    exam.categoryType.length > 0\r\n                      ? exam.categoryType\r\n                      : [{ name: 'Uncategorized' }]\r\n                  }\r\n                  description={exam.description}\r\n                  createdAt={exam.createdAt}\r\n                  free={\r\n                    !authToken &&\r\n                    exam.categoryType.filter((cat) => cat.name === 'Free')\r\n                      .length > 0\r\n                  }\r\n                  examLoader={examLoader}\r\n                />\r\n              ) : (\r\n                ''\r\n              )\r\n            )}\r\n          </div>\r\n          {!landing && (\r\n            <div className='my-2 d-flex justify-content-center'>\r\n              {exams.length > 2 ? (\r\n                <Button\r\n                  style={{ height: '50px', width: '150px' }}\r\n                  onClick={() => {\r\n                    handleShow()\r\n                  }}\r\n                >\r\n                  {intl.formatMessage({\r\n                    id: 'btn.more',\r\n                    defaultMessage: 'More...'\r\n                  })}\r\n                  .\r\n                </Button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { Component } from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport GallaryCard from '../../../components/exams/gallary/gallaryCard'\r\n//import \"./exam.scss\";\r\n\r\nclass Exam extends Component {\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      exams: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/featured')\r\n      .then((res) => {\r\n        if (res.status == 200) this.setState({ exams: res.data })\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='exam' className='mb-5 offset'>\r\n        <GallaryCard\r\n          title={this.props.intl.formatMessage({\r\n            id: 'db.fe',\r\n            defaultMessage: 'Our Featured Exams'\r\n          })}\r\n          exams={this.state.exams}\r\n          landing={true}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default injectIntl(Exam)\r\n"],"sourceRoot":""}