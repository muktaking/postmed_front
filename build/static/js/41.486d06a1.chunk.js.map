{"version":3,"sources":["utils/paginate.js","container/questionBuilder/component/miniques.js","container/questionBuilder/component/stepOne.js","container/questionBuilder/component/stepThree.js","container/questionBuilder/component/stepTwo.js","container/questionBuilder/component/utils.js","container/questionBuilder/create.js","container/questionBuilder/edit.js","container/questionBuilder/selectQuestions.js","container/questionBuilder/component/miniManyQues.js","container/questionBuilder/upload.js","container/questionBuilder/index.js"],"names":["paginate","items","pageNumber","pageSize","startIndex","_","slice","take","value","PopoverWrapper","React","forwardRef","ref","questionId","props","dispatch","useDispatch","Popover","id","Title","as","Content","Button","variant","size","className","onClick","deleteQuestionLoader","Miniques","question","viewHandler","style","fontSize","qText","Badge","qType","disabled","OverlayTrigger","trigger","placement","overlay","StepOne","values","errors","handleChange","categories","useSelector","state","category","useEffect","fetchCategory","Form","Group","controlId","Label","Control","type","placeholder","name","title","onChange","map","index","CategorySlug","slug","replace","key","StepThree","generalFeedback","tags","StemTwo","stems","stemInc","stemDec","console","log","stem","Row","Col","lg","InputGroup","Prepend","Text","Check","inline","label","checked","toString","initialStems","arr","i","push","qStem","aStem","fbStem","submitHandler","stemNum","edit","setSubmitting","error","length","forEach","parseInt","filter","editQuestionLoader","createQuestionLoader","alert","JSON","stringify","Index","useState","setStemNum","setStems","loading","res","response","stemsInc","Spinner","animation","role","Toast","show","onClose","resetResponseLoader","position","right","Header","Body","result","initialValues","validate","onSubmit","handleSubmit","resStyle","zIndex","data","setData","axios","get","process","then","categoryId","aStemSba","catch","e","enableReinitialize","SelectQuestions","currentPage","setCurrentPage","currentCategory","setCurrentCategory","questions","questionsForPagi","getQuestionByCategoryLoader","message","target","categorySlug","ListGroup","Item","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","page","itemClass","linkClass","prevPageText","nextPageText","setShow","handleClose","Modal","onHide","closeButton","Footer","QuestionUpload","undefined","file","formErrors","setFormErrors","setFile","cat","setCat","setRes","setLoading","uploadedExcelQuestion","setUploadedExcelQuestion","files","validator","isInt","isMongoId","height","overflowY","overflowX","ques","ind","preventDefault","rest","valid","Object","v","formValid","FormData","append","post","headers","errorHandler","toUpperCase","DefaultView","disable","RoutesConfig","Question","metaInfo","QuestionBuilder","view","setView","setQuestionId"],"mappings":"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","file":"static/js/41.486d06a1.chunk.js","sourcesContent":["import _ from 'lodash'\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize\r\n  return _(items).slice(startIndex).take(pageSize).value()\r\n}\r\n","import React from 'react'\r\nimport { Badge, Button, OverlayTrigger, Popover } from 'react-bootstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport { deleteQuestionLoader } from '../../../store/question'\r\n\r\nexport const PopoverWrapper = React.forwardRef(\r\n  ({ questionId, ...props }, ref) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n      <Popover id='popover-basic' {...props} ref={ref}>\r\n        <Popover.Title as='h3'>\r\n          Are You sure to delete this question\r\n        </Popover.Title>\r\n        <Popover.Content>\r\n          <Button\r\n            variant='danger'\r\n            size='sm'\r\n            className='mx-2'\r\n            onClick={() => {\r\n              dispatch(deleteQuestionLoader(questionId))\r\n            }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Popover.Content>\r\n      </Popover>\r\n    )\r\n  }\r\n)\r\n\r\nexport default function Miniques({ question, viewHandler }) {\r\n  return (\r\n    <div>\r\n      <p style={{ fontSize: '1.1rem' }}>\r\n        {question.qText + ' -->  '}\r\n        <Badge variant='secondary'>{question.qType + ' '}</Badge>\r\n        <Button\r\n          variant='primary'\r\n          size='sm'\r\n          className='mx-2'\r\n          disabled={!viewHandler}\r\n          onClick={() => {\r\n            viewHandler('edit', question.id)\r\n          }}\r\n        >\r\n          {' '}\r\n          Edit{' '}\r\n        </Button>\r\n\r\n        <OverlayTrigger\r\n          trigger='click'\r\n          placement='bottom'\r\n          overlay={<PopoverWrapper questionId={question.id} />}\r\n        >\r\n          <Button variant='danger' size='sm' className='mr-2'>\r\n            Delete\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchCategory } from '../../../store/category'\r\n\r\nexport default function StepOne({ values, errors, handleChange }) {\r\n  const dispatch = useDispatch()\r\n  const categories = useSelector((state) => state.category.categories)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategory())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div>\r\n      <Form.Group controlId='formGroupQuestionTitle'>\r\n        <Form.Label>Question Title</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Question Title'\r\n          name='title'\r\n          value={values.title}\r\n          onChange={handleChange}\r\n        />\r\n        <span className='errorMessage'>{errors.title}</span>\r\n      </Form.Group>\r\n      <Form.Group controlId='formGridCategory'>\r\n        <Form.Label>Question Category</Form.Label>\r\n        <Form.Control\r\n          as='select'\r\n          name='category'\r\n          value={values.category}\r\n          onChange={handleChange}\r\n        >\r\n          <option>Select...</option>\r\n          {categories.map((value, index) => {\r\n            let CategorySlug = value.slug.replace(/_/g, ' / ')\r\n            if (\r\n              value.name !== 'Free' &&\r\n              value.name !== 'Featured' &&\r\n              value.name !== 'Uncategorized'\r\n            )\r\n              return (\r\n                <option key={index} value={value.id}>\r\n                  {CategorySlug}\r\n                </option>\r\n              )\r\n          })}\r\n        </Form.Control>\r\n\r\n        <span className='errorMessage'>{errors.category}</span>\r\n      </Form.Group>\r\n      <Form.Group controlId='formGridQType'>\r\n        <Form.Label>Question Category</Form.Label>\r\n        <Form.Control\r\n          as='select'\r\n          name='qType'\r\n          value={values.qType}\r\n          onChange={handleChange}\r\n          // ref={selectOptionValueRef}\r\n        >\r\n          <option value='matrix'>Matrix</option>\r\n          <option value='sba'>SBA</option>\r\n        </Form.Control>\r\n\r\n        <span className='errorMessage'>{errors.category}</span>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId='formGroupQuestionQText'>\r\n        <Form.Label>Question Text</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='Question text'\r\n          name='qText'\r\n          value={values.qText}\r\n          // value={Question ? Question.title : null}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <span className='errorMessage'>{errors.qText}</span>\r\n      </Form.Group>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nexport default function StepThree({ values, errors, handleChange }) {\r\n  return (\r\n    <div>\r\n      <Form.Group controlId='formGroupQuestionTitle'>\r\n        <Form.Label>General Feedback</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='feedback'\r\n          name='generalFeedback'\r\n          value={values.generalFeedback}\r\n          onChange={handleChange}\r\n        />\r\n        <span className='errorMessage'>{errors.generalFeedback}</span>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId='formGroupQuestionQText'>\r\n        <Form.Label>Question Tags</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          placeholder='tag, tags'\r\n          name='tags'\r\n          value={values.tags}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <span className='errorMessage'>{errors.tags}</span>\r\n      </Form.Group>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button, Col, Form, InputGroup, Row } from 'react-bootstrap'\r\n\r\nexport default function StemTwo({\r\n  values,\r\n  stems,\r\n  errors,\r\n  handleChange,\r\n  stemInc,\r\n  stemDec\r\n}) {\r\n  console.log(values)\r\n\r\n  return (\r\n    <div>\r\n      {stems.map((stem, index) => (\r\n        <Row className='pr-3 pl-2 mt-1'>\r\n          <Col lg={5}>\r\n            <Form.Group controlId='formGroupQuestionStem'>\r\n              <InputGroup className='mb-2'>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>{index}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='stem...'\r\n                  name={'qStem' + index}\r\n                  value={values['qStem' + index]}\r\n                  onChange={handleChange}\r\n                />\r\n              </InputGroup>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col lg={2}>\r\n            <Form.Group as={Col} controlId='formGroupQuestionStemAnswer'>\r\n              {values.qType === 'matrix' ? (\r\n                <>\r\n                  <Form.Check\r\n                    inline\r\n                    type='radio'\r\n                    label='True'\r\n                    name={'aStem' + index}\r\n                    id='formHorizontalRadios1'\r\n                    value={1}\r\n                    checked={values['aStem' + index] === '1'}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <Form.Check\r\n                    inline\r\n                    type='radio'\r\n                    label='False'\r\n                    name={'aStem' + index}\r\n                    id='formHorizontalRadios2'\r\n                    value={0}\r\n                    checked={values['aStem' + index] === '0'}\r\n                    onChange={handleChange}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <Form.Check\r\n                  type='radio'\r\n                  name={'aStemSba'}\r\n                  id='formHorizontalRadios1'\r\n                  value={index}\r\n                  checked={values['aStemSba'] === index.toString()}\r\n                  onChange={handleChange}\r\n                />\r\n              )}\r\n            </Form.Group>\r\n          </Col>\r\n          <Col lg={5}>\r\n            <Form.Group as={Col} controlId='formGroupQuestionStemFeedBack'>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='FeedBack'\r\n                name={'fbStem' + index}\r\n                value={values['fbStem' + index]}\r\n                // value={Question ? Question.title : null}\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      ))}\r\n      <div className='mt-2 mb-5'>\r\n        <Button className='mr-3' onClick={stemInc}>\r\n          Plus\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={(values) => {\r\n            stemDec(values)\r\n          }}\r\n        >\r\n          Minus\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  createQuestionLoader,\r\n  editQuestionLoader\r\n} from '../../../store/question'\r\n\r\nexport const stem = (initialStems) => {\r\n  console.log('iNum ' + initialStems)\r\n  if (typeof initialStems === 'number') {\r\n    const arr = []\r\n    for (let i = 0; i < initialStems; i++) {\r\n      arr.push({\r\n        qStem: '',\r\n        aStem: '',\r\n        fbStem: ''\r\n      })\r\n    }\r\n    return arr\r\n  }\r\n  return initialStems\r\n}\r\n\r\nexport function submitHandler(stemNum, dispatch, edit) {\r\n  return (values, { setSubmitting }) => {\r\n    let error = ''\r\n\r\n    if (values.stems && values.stems.length > 0 && values['qStem0']) {\r\n      values.stems = [...stem(stemNum)]\r\n      values.stems.forEach((stem, index) => {\r\n        if (\r\n          index > 0 &&\r\n          !values['qStem' + (index - 1)] &&\r\n          values['qStem' + index]\r\n        ) {\r\n          error += ` Stem's No.${index - 1} qStem can not be empty`\r\n        } else if (\r\n          values.qType === 'matrix' &&\r\n          (values['aStem' + index] || values['fbStem' + index]) &&\r\n          !values['qStem' + index]\r\n        ) {\r\n          error += ` Stem's No.${index} qStem can not be empty`\r\n        } else if (\r\n          values.qType === 'matrix' &&\r\n          values['qStem' + index] &&\r\n          !values['aStem' + index]\r\n        ) {\r\n          error += ` Stem's No.${index} qStem or aStem can not be empty`\r\n        } else if (\r\n          values.qType === 'sba' &&\r\n          values['fbStem' + index] &&\r\n          !values['qStem' + index]\r\n        ) {\r\n          error += ` Stem's No.${index} qStem can not be empty`\r\n        } else if (\r\n          values.qType === 'sba' &&\r\n          !values['qStem' + values['aStemSba']]\r\n        ) {\r\n          error += ` Stem's No.${values['aStemSba']} qStem or aStem can not be empty`\r\n        }\r\n        if (error === '') {\r\n          stem['qStem'] = values['qStem' + index]\r\n          stem['aStem'] =\r\n            values.qType === 'matrix'\r\n              ? values['aStem' + index]\r\n              : (parseInt(values['aStemSba']) + 1).toString()\r\n          stem['fbStem'] = values['fbStem' + index]\r\n          // delete values['qStem' + index];\r\n          // delete values['aStem' + index];\r\n          // delete values['fbStem' + index];\r\n          // delete values['aStemSba'];\r\n        }\r\n      })\r\n    } else {\r\n      values.stems = [...stem(stemNum)]\r\n    }\r\n\r\n    if (error === '') {\r\n      values.stems = values.stems.filter((stem) => stem.qStem)\r\n\r\n      if (edit) {\r\n        dispatch(\r\n          editQuestionLoader(values.id, {\r\n            title: values.title,\r\n            category: values.category,\r\n            qType: values.qType,\r\n            qText: values.qText,\r\n            stem: values.stems,\r\n            generalFeedback: values.generalFeedback,\r\n            tags: [values.tags]\r\n          })\r\n        )\r\n      } else {\r\n        dispatch(\r\n          createQuestionLoader({\r\n            title: values.title,\r\n            category: values.category,\r\n            qType: values.qType,\r\n            qText: values.qText,\r\n            stem: values.stems,\r\n            generalFeedback: values.generalFeedback,\r\n            tags: [values.tags]\r\n          })\r\n        )\r\n      }\r\n      setSubmitting(true)\r\n    } else {\r\n      alert(JSON.stringify(error, null, 2))\r\n      setSubmitting(false)\r\n    }\r\n  }\r\n}\r\n\r\nexport function validator() {\r\n  return (values) => {\r\n    const errors = {}\r\n    if (!values.title) {\r\n      errors.title = 'Required'\r\n    } else if (!values.category) {\r\n      errors.category = 'Required'\r\n    } else if (!values.qText) {\r\n      errors.qText = 'Required'\r\n    }\r\n\r\n    return errors\r\n  }\r\n}\r\n","import { Formik } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { Button, Form, Spinner, Toast } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { resetResponseLoader } from '../../store/question'\r\nimport MiniQues from './component/miniques'\r\nimport StepOne from './component/stepOne'\r\nimport StepThree from './component/stepThree'\r\nimport StepTwo from './component/stepTwo'\r\nimport { stem, submitHandler, validator } from './component/utils'\r\n\r\nexport default function Index({ viewHandler }) {\r\n  const [stemNum, setStemNum] = useState(5)\r\n  const [stems, setStems] = useState(stem(5))\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector((state) => state.question.loading)\r\n  const res = useSelector((state) => state.question.response)\r\n\r\n  const stemsInc = () => {\r\n    setStems(stem(stemNum + 1))\r\n    setStemNum(stemNum + 1)\r\n  }\r\n  const stemDec = (values) => {\r\n    delete values['qStem' + (stemNum - 1)]\r\n    delete values['aStem' + (stemNum - 1)]\r\n    delete values['fbStem' + (stemNum - 1)]\r\n    setStems(stem(stemNum - 1))\r\n    setStemNum(stemNum - 1)\r\n  }\r\n\r\n  const setRes = () => {\r\n    dispatch(resetResponseLoader())\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <Spinner\r\n          animation='grow'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      <Toast\r\n        show={res}\r\n        onClose={setRes}\r\n        style={{ position: 'fixed', right: '20px' }}\r\n      >\r\n        <Toast.Header>\r\n          <strong className='mr-auto'>\r\n            {res && 'result' in res\r\n              ? 'Question Created Successfully'\r\n              : 'Error Message'}\r\n          </strong>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          {res && 'result' in res ? (\r\n            <MiniQues question={res.result} viewHandler={viewHandler} />\r\n          ) : (\r\n            res\r\n          )}\r\n        </Toast.Body>\r\n      </Toast>\r\n\r\n      <h3>Create Question</h3>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          title: '',\r\n          category: '',\r\n          qType: 'matrix',\r\n          qText: '',\r\n          stems: [...stems],\r\n          generalFeedback: '',\r\n          tags: ''\r\n        }}\r\n        validate={validator()}\r\n        onSubmit={submitHandler(stemNum, dispatch)}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          handleChange,\r\n          handleSubmit\r\n          /* and other goodies */\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <StepOne\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n            />\r\n            <StepTwo\r\n              stems={stems}\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n              stemInc={stemsInc}\r\n              stemDec={stemDec}\r\n            />\r\n            <StepThree\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n            />\r\n            <Button type='submit' className='mt-3 btn-submit'>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Spinner, Toast } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { resetResponseLoader } from '../../store/question'\r\nimport MiniQues from './component/miniques'\r\nimport StepOne from './component/stepOne'\r\nimport StepThree from './component/stepThree'\r\nimport StepTwo from './component/stepTwo'\r\nimport { stem, submitHandler, validator } from './component/utils'\r\n\r\nconst resStyle = {\r\n  position: 'fixed',\r\n  right: '20px',\r\n  zIndex: '10000'\r\n}\r\n\r\nexport default function Index({ viewHandler, id }) {\r\n  const [stemNum, setStemNum] = useState(5)\r\n  const [stems, setStems] = useState(stem(5))\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector((state) => state.question.loading)\r\n  const res = useSelector((state) => state.question.response)\r\n\r\n  const [data, setData] = useState({\r\n    id: null,\r\n    title: '',\r\n    category: '',\r\n    qType: 'matrix',\r\n    qText: '',\r\n    stems: [...stems],\r\n    generalFeedback: '',\r\n    tags: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/questions/' + id)\r\n      .then((response) => {\r\n        let question = {\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          category: response.data.categoryId,\r\n          qType: response.data.qType,\r\n          qText: response.data.qText,\r\n          stems: response.data.stems,\r\n          generalFeedback: response.data.generalFeedback,\r\n          tags: response.data.tags\r\n        }\r\n        response.data.stems.forEach((stem, index) => {\r\n          question = {\r\n            ...question,\r\n            ['qStem' + index]: stem.qStem,\r\n            ['aStem' + index]:\r\n              question.qType === 'matrix' && stem.aStem.toString(),\r\n            ['fbStem' + index]: stem.fbStem,\r\n            aStemSba: null\r\n          }\r\n        })\r\n        if (response.data.qType === 'sba')\r\n          question.aStemSba = (response.data.stems[0].aStem - 1).toString()\r\n        setData(question)\r\n      })\r\n      .catch((e) => console.log(e))\r\n  }, [id])\r\n\r\n  const setRes = () => {\r\n    dispatch(resetResponseLoader())\r\n  }\r\n\r\n  const stemsInc = () => {\r\n    setStems(stem(stemNum + 1))\r\n    setStemNum(stemNum + 1)\r\n  }\r\n  const stemDec = (values) => {\r\n    delete values['qStem' + (stemNum - 1)]\r\n    delete values['aStem' + (stemNum - 1)]\r\n    delete values['fbStem' + (stemNum - 1)]\r\n    setStems(stem(stemNum - 1))\r\n    setStemNum(stemNum - 1)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <Spinner\r\n          animation='grow'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      {\r\n        <Toast show={res} onClose={setRes} style={resStyle}>\r\n          <Toast.Header>\r\n            <strong className='mr-auto'>Question Edited Successfully</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>\r\n            {res && 'id' in res ? (\r\n              <MiniQues question={res} viewHandler={viewHandler} />\r\n            ) : (\r\n              'Error occured'\r\n            )}\r\n          </Toast.Body>\r\n        </Toast>\r\n      }\r\n\r\n      <h3>Edit Question</h3>\r\n\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={data}\r\n        validate={validator()}\r\n        onSubmit={submitHandler(stemNum, dispatch, true)}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          handleChange,\r\n          handleSubmit\r\n          /* and other goodies */\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <StepOne\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n            />\r\n            <StepTwo\r\n              stems={stems}\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n              stemInc={stemsInc}\r\n              stemDec={stemDec}\r\n            />\r\n            <StepThree\r\n              values={values}\r\n              errors={errors}\r\n              handleChange={handleChange}\r\n            />\r\n            <Button type='submit' className='mt-3 btn-submit'>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Form, ListGroup, Spinner, Toast } from 'react-bootstrap'\r\nimport Pagination from 'react-js-pagination'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchCategory } from '../../store/category'\r\nimport {\r\n  getQuestionByCategoryLoader,\r\n  resetResponseLoader\r\n} from '../../store/question'\r\nimport { paginate } from '../../utils/paginate'\r\nimport MiniQues from './component/miniques'\r\n\r\nexport default function SelectQuestions({ viewHandler }) {\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [currentCategory, setCurrentCategory] = useState(null)\r\n  const dispatch = useDispatch()\r\n  const categories = useSelector((state) => state.category.categories)\r\n  const questions = useSelector((state) => state.question.questions)\r\n  const loading = useSelector((state) => state.question.loading)\r\n  const res = useSelector((state) => state.question.response)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategory())\r\n  }, [dispatch])\r\n  const onPageHandler = (page) => {\r\n    setCurrentPage(page)\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(getQuestionByCategoryLoader(e.target.value))\r\n    setCurrentCategory(e.target.value)\r\n  }\r\n  const questionsForPagi = paginate(questions, currentPage, 10)\r\n\r\n  const setRes = () => {\r\n    dispatch(resetResponseLoader())\r\n    dispatch(getQuestionByCategoryLoader(currentCategory))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <Spinner\r\n          animation='grow'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      {\r\n        <Toast\r\n          show={res}\r\n          onClose={setRes}\r\n          style={{ position: 'fixed', right: '20px' }}\r\n        >\r\n          <Toast.Header>\r\n            <strong className='mr-auto'>Response</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>\r\n            {res && 'message' in res ? res.message : JSON.stringify(res)}\r\n          </Toast.Body>\r\n        </Toast>\r\n      }\r\n\r\n      <div className='d-flex'>\r\n        <div>\r\n          <Form.Group controlId='categoryType' className='mr-5'>\r\n            <Form.Label>Category Type</Form.Label>\r\n            <Form.Control\r\n              as='select'\r\n              name='categoryType'\r\n              onChange={handleChange}\r\n            >\r\n              <option value=''>Select...</option>\r\n              {categories.map((value) => {\r\n                let categorySlug = value.slug.replace(/_/g, ' / ')\r\n                return <option value={value.id}>{categorySlug}</option>\r\n              })}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </div>\r\n        <div>\r\n          <ListGroup className='my-2'>\r\n            {questions.length < 1 && (\r\n              <p className='text-danger'>No Question in this category.</p>\r\n            )}\r\n            {questionsForPagi.map((question, index) => (\r\n              <ListGroup.Item\r\n                key={question.id}\r\n                variant={index % 2 === 0 ? 'dark' : 'light'}\r\n                className='d-flex'\r\n              >\r\n                <div className='mt-1 mr-3'>\r\n                  {index + 1 + (currentPage - 1) * 10}.\r\n                </div>\r\n                <MiniQues question={question} viewHandler={viewHandler} />\r\n              </ListGroup.Item>\r\n            ))}\r\n          </ListGroup>\r\n        </div>\r\n      </div>\r\n\r\n      <Pagination\r\n        activePage={currentPage}\r\n        itemsCountPerPage={10}\r\n        totalItemsCount={questions.length}\r\n        pageRangeDisplayed={4}\r\n        onChange={onPageHandler}\r\n        itemClass='page-item'\r\n        linkClass='page-link'\r\n        prevPageText='Previous'\r\n        nextPageText='Next'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, Modal, OverlayTrigger } from 'react-bootstrap'\r\nimport EditQuestion from '../edit'\r\nimport { PopoverWrapper } from './miniques'\r\n\r\nexport default function Miniques({ index, question, viewHandler }) {\r\n  const [show, setShow] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Question</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <EditQuestion id={question.id} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <p style={{ fontSize: '1.1rem' }}>\r\n        {index + 1 + '. ' + question.qText + ' -->  '}\r\n        <Badge variant='secondary'>{question.qType + ' '}</Badge>\r\n        <Button\r\n          variant='primary'\r\n          size='sm'\r\n          className='mx-2'\r\n          onClick={handleShow}\r\n        >\r\n          {' '}\r\n          Edit{' '}\r\n        </Button>\r\n\r\n        <OverlayTrigger\r\n          trigger='click'\r\n          placement='bottom'\r\n          overlay={<PopoverWrapper questionId={question.id} />}\r\n        >\r\n          <Button variant='danger' size='sm' className='mr-2'>\r\n            Delete\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form, Spinner, Toast } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport validator from 'validator'\r\nimport { fetchCategory } from '../../store/category'\r\nimport errorHandler from '../../utils/errorHandler'\r\nimport MiniManyQues from './component/miniManyQues'\r\n\r\nconst formValid = (formErrors, ...rest) => {\r\n  //to check if form fields are null or contain error\r\n  console.log(rest, formErrors)\r\n  let valid = true\r\n  let error = ''\r\n  Object.values(formErrors).forEach((v) => {\r\n    v && (valid = false) && (error = v)\r\n    v && (error = v)\r\n  })\r\n\r\n  Object.values(rest).forEach((v) => {\r\n    v === undefined && (valid = false)\r\n  })\r\n  return { valid, error } // valid: is it valid ; error: what is the error message\r\n}\r\n\r\nconst QuestionUpload = ({ viewHandler }) => {\r\n  const dispatch = useDispatch()\r\n  const categories = useSelector((state) => state.category.categories)\r\n  const [formErrors, setFormErrors] = useState({\r\n    category: undefined,\r\n    file: undefined\r\n  })\r\n  const [file, setFile] = useState(undefined)\r\n  const [cat, setCat] = useState(undefined)\r\n  const [res, setRes] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n  const [uploadedExcelQuestion, setUploadedExcelQuestion] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategory())\r\n  }, [dispatch])\r\n\r\n  const closeRes = () => {\r\n    setRes(null)\r\n    setUploadedExcelQuestion([])\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, files } = e.target\r\n    const errors = formErrors\r\n\r\n    switch (name) {\r\n      case 'category':\r\n        errors.category =\r\n          validator.isInt(value) || validator.isMongoId(value)\r\n            ? undefined\r\n            : 'Category is not valid'\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    setFormErrors(errors)\r\n    if (name === 'file') setFile(files ? files[0] : undefined)\r\n    if (name === 'category') setCat(value)\r\n  }\r\n\r\n  const uploadHandler = (e) => {\r\n    e.preventDefault()\r\n\r\n    const { valid, error } = formValid(formErrors, file, cat)\r\n\r\n    if (valid) {\r\n      const data = new FormData()\r\n      data.append('file', file)\r\n      data.append('category', cat)\r\n\r\n      setLoading(true)\r\n      axios\r\n        .post(process.env.REACT_APP_SITE_URL + '/questions/files', data, {\r\n          headers: { 'Content-Type': 'multipart/form-data' }\r\n        })\r\n        .then((response) => {\r\n          setUploadedExcelQuestion(response.data)\r\n          setRes('Successfully Updated')\r\n          setLoading(false)\r\n        })\r\n        .catch((error) => {\r\n          setRes(errorHandler(error))\r\n          setLoading(false)\r\n        })\r\n    } else {\r\n      setRes(\r\n        'Please fill form corectly' +\r\n          (error ? ' __ ' + error.toUpperCase() + ' __' : '')\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <Spinner\r\n          animation='grow'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      {\r\n        <Toast\r\n          show={res}\r\n          onClose={closeRes}\r\n          style={{\r\n            height: '100vh',\r\n            position: 'fixed',\r\n            right: '20px',\r\n            overflowY: 'scroll',\r\n            overflowX: 'hidden'\r\n          }}\r\n        >\r\n          <Toast.Header>\r\n            <strong className='mr-auto'>Response</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>\r\n            <p>\r\n              {res + ' '}\r\n              {uploadedExcelQuestion.length > 0 && uploadedExcelQuestion.length}\r\n            </p>\r\n            <div>\r\n              {uploadedExcelQuestion.length > 0 &&\r\n                uploadedExcelQuestion.map((ques, ind) => (\r\n                  <MiniManyQues\r\n                    key={ind}\r\n                    index={ind}\r\n                    question={ques}\r\n                    viewHandler={viewHandler}\r\n                  />\r\n                ))}\r\n            </div>\r\n          </Toast.Body>\r\n        </Toast>\r\n      }\r\n\r\n      <h3> Upload by Excel file</h3>\r\n      <Form className='mt-2' onSubmit={uploadHandler}>\r\n        <Form.Group controlId='formGridCategory'>\r\n          <Form.Label>Question Category</Form.Label>\r\n          <Form.Control as='select' name='category' onChange={handleChange}>\r\n            <option value=''>Select</option>\r\n            {categories.map((value, index) => {\r\n              let CategorySlug = value.slug.replace(/_/g, ' / ')\r\n              return (\r\n                <option key={index} value={value.id}>\r\n                  {CategorySlug}\r\n                </option>\r\n              )\r\n            })}\r\n          </Form.Control>\r\n          {formErrors.category && (\r\n            <span className='errorMessage'>{formErrors.category}</span>\r\n          )}\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Upload an excel file</Form.Label>\r\n          <input\r\n            type='file'\r\n            name='file'\r\n            className={'form-control-file'}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Button type='submit' className='btn-submit'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionUpload\r\n","import React, { useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { resetResponseLoader } from '../../store/question'\r\nimport CreateQuestion from './create'\r\nimport EditQuestion from './edit'\r\nimport SelectQuestions from './selectQuestions'\r\nimport Upload from './upload'\r\n\r\nconst DefaultView = ({ viewHandler, disable }) => {\r\n  return (\r\n    <div className='my-3'>\r\n      <MetaInfo {...RoutesConfig.Question.metaInfo} />\r\n\r\n      <Button\r\n        variant='primary'\r\n        size='bg'\r\n        className='mr-3 mt-3'\r\n        disabled={disable === 'create'}\r\n        onClick={() => {\r\n          viewHandler('create')\r\n        }}\r\n      >\r\n        Create Question\r\n      </Button>\r\n      <Button\r\n        variant='primary'\r\n        size='bg'\r\n        className='mr-3 mt-3'\r\n        disabled={disable === 'upload'}\r\n        onClick={() => {\r\n          viewHandler('upload')\r\n        }}\r\n      >\r\n        Upload An Excel File\r\n      </Button>\r\n      <Button\r\n        variant='primary'\r\n        size='bg'\r\n        className='mt-3'\r\n        disabled={disable === 'select'}\r\n        onClick={() => {\r\n          viewHandler('select')\r\n        }}\r\n      >\r\n        Select Questions For Edit\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function QuestionBuilder() {\r\n  const [view, setView] = useState()\r\n  const [questionId, setQuestionId] = useState(null)\r\n  const dispatch = useDispatch()\r\n\r\n  const viewHandler = (view, id) => {\r\n    dispatch(resetResponseLoader())\r\n    if (id) setQuestionId(id)\r\n    setView(view)\r\n  }\r\n\r\n  switch (view) {\r\n    case 'create':\r\n      return (\r\n        <>\r\n          {' '}\r\n          <DefaultView viewHandler={viewHandler} disable='create' />{' '}\r\n          <CreateQuestion viewHandler={viewHandler} />{' '}\r\n        </>\r\n      )\r\n    case 'upload':\r\n      return (\r\n        <>\r\n          {' '}\r\n          <DefaultView viewHandler={viewHandler} disable='upload' />{' '}\r\n          <Upload viewHandler={viewHandler} />{' '}\r\n        </>\r\n      )\r\n    case 'select':\r\n      return (\r\n        <>\r\n          {' '}\r\n          <DefaultView viewHandler={viewHandler} disable='select' />{' '}\r\n          <SelectQuestions viewHandler={viewHandler} />{' '}\r\n        </>\r\n      )\r\n\r\n    case 'edit':\r\n      return (\r\n        <>\r\n          {' '}\r\n          <DefaultView viewHandler={viewHandler} />{' '}\r\n          <EditQuestion viewHandler={viewHandler} id={questionId} />{' '}\r\n        </>\r\n      )\r\n\r\n    default:\r\n      return <DefaultView viewHandler={viewHandler} />\r\n  }\r\n}\r\n"],"sourceRoot":""}