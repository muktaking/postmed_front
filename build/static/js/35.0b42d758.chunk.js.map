{"version":3,"sources":["container/exams/component/examByCat.js","container/exams/examListsByCatShower.js"],"names":["ExamByCat","exam","dispatch","useDispatch","authToken","useSelector","state","auth","token","Col","sm","Badge","variant","style","position","top","left","categoryType","filter","cat","name","length","className","size","title","moment","createdAt","format","to","id","Button","onClick","resetExamResultLoader","defaultMessage","description","contentCenter","zIndex","ExamListsByCatShower","useParams","idA","split","useState","exams","setExams","loading","setLoading","useEffect","axios","get","process","then","response","data","catch","e","console","log","Spinner","animation","role","map","Row","key","width"],"mappings":"yQASe,SAASA,EAAT,GAA8B,IAATC,EAAQ,EAARA,KAC5BC,EAAWC,cACXC,EAAYC,aAAY,SAACC,GAAD,QAAYA,EAAMC,KAAKC,SACrD,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,MAAO,CAAEC,SAAU,WAAYC,IAAK,QAASC,KAAM,WAEjDZ,GACAH,EAAKgB,aAAaC,QAAO,SAACC,GAAD,MAAsB,SAAbA,EAAIC,QAAiBC,OAAS,GAChE,QAEJ,wBAAIC,UAAU,IACZ,kBAAC,IAAD,CAAcC,KAAK,WACnB,0BAAMD,UAAU,QAAQrB,EAAKuB,QAE/B,yBAAKF,UAAU,IACb,kBAAC,IAAD,CAASC,KAAK,WACd,kBAACZ,EAAA,EAAD,CAAOW,UAAU,OAAOV,QAAQ,SAC7Ba,IAAOxB,EAAKyB,WAAWC,OAAO,yBAIrC,kBAAClB,EAAA,EAAD,CAAKC,GAAI,EAAGY,UAAU,6BACpB,kBAAC,OAAD,CACEA,UAAU,aACVM,KACIxB,GACFH,EAAKgB,aAAaC,QAAO,SAACC,GAAD,MAAsB,SAAbA,EAAIC,QAAiBC,OAAS,EAC5D,eACA,WAAapB,EAAK4B,IAGxB,kBAACC,EAAA,EAAD,CACElB,QAAQ,6BACRmB,QAAS,WACP7B,EAAS8B,iBAGX,kBAAC,IAAD,CAAkBH,GAAG,YAAYI,eAAe,kBAItD,kBAACxB,EAAA,EAAD,CAAKC,GAAI,IACP,6BACA,uBAAGY,UAAU,IACX,kBAAC,IAAD,CAAYC,KAAK,WACjB,0BAAMD,UAAU,QAAQrB,EAAKiC,gB,wCCpDvC,IAAMC,EAAgB,CAEpBrB,SAAU,QACVC,IAAK,OACLC,KAAM,MACNoB,OAAQ,eAGK,SAASC,IAAwB,IACtCR,EAAOS,cAAPT,GACHT,EAAc,KAARmB,EAAc,KACzB,GAAIV,EAAJ,OAAsBA,EAAGW,MAAM,KAA/B,mBAASpB,EAAT,KAAemB,EAAf,KAH6C,MAInBE,mBAAS,IAJU,mBAItCC,EAJsC,KAI/BC,EAJ+B,OAKfF,oBAAS,GALM,mBAKtCG,EALsC,KAK7BC,EAL6B,KAoB7C,OAbAC,qBAAU,WACRD,GAAW,GACXE,IACGC,IAAIC,qDAAsDV,GAC1DW,MAAK,SAACC,GACLN,GAAW,GACXF,EAASQ,EAASC,SAEnBC,OAAM,SAACC,GACNT,GAAW,GACXU,QAAQC,IAAIF,QAEf,CAACf,IAEF,yBAAKjB,UAAU,QACZsB,GACC,kBAACa,EAAA,EAAD,CACEC,UAAU,OACVC,KAAK,SACL/C,QAAQ,OACRC,MAAOsB,IAGX,wBAAIb,UAAU,eACZ,0BAAMA,UAAU,QAAhB,yBACA,kBAACX,EAAA,EAAD,CAAOC,QAAQ,WAAWQ,KAE1BwB,GACA,uBAAGtB,UAAU,2BACVoB,EAAMrB,OAAS,GAAK,wBAGzB,yBAAKC,UAAU,iCACZoB,EAAMkB,KAAI,SAAC3D,GAAD,OACT,kBAAC4D,EAAA,EAAD,CACEC,IAAK7D,EAAKuB,MACVF,UAAU,wCACVT,MAAO,CAAEkD,MAAO,UAEhB,kBAAC/D,EAAD,CAAWC,KAAMA","file":"static/js/35.0b42d758.chunk.js","sourcesContent":["import moment from 'moment'\r\nimport React from 'react'\r\nimport { Badge, Button, Col } from 'react-bootstrap'\r\nimport { BsClock, BsFileText, BsLayersFill } from 'react-icons/bs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\n\r\nexport default function ExamByCat({ exam }) {\r\n  const dispatch = useDispatch()\r\n  const authToken = useSelector((state) => (state.auth.token ? true : false))\r\n  return (\r\n    <>\r\n      <Col sm={7}>\r\n        <Badge\r\n          variant='warning'\r\n          style={{ position: 'absolute', top: '-25px', left: '-10px' }}\r\n        >\r\n          {!authToken &&\r\n            exam.categoryType.filter((cat) => cat.name === 'Free').length > 0 &&\r\n            'Free'}\r\n        </Badge>\r\n        <h4 className=''>\r\n          <BsLayersFill size='1.5rem' />\r\n          <span className='ml-2'>{exam.title}</span>\r\n        </h4>\r\n        <div className=''>\r\n          <BsClock size='1.5rem' />\r\n          <Badge className='ml-2' variant='light'>\r\n            {moment(exam.createdAt).format('YYYY-MM-DD hh:mm A')}\r\n          </Badge>\r\n        </div>\r\n      </Col>\r\n      <Col sm={5} className='d-flex align-items-center'>\r\n        <Link\r\n          className='text-white'\r\n          to={\r\n            (!authToken &&\r\n            exam.categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n              ? '/exams/free/'\r\n              : '/exams/') + exam.id\r\n          }\r\n        >\r\n          <Button\r\n            variant='outline-light mt-4 mt-sm-0'\r\n            onClick={() => {\r\n              dispatch(resetExamResultLoader())\r\n            }}\r\n          >\r\n            <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n          </Button>\r\n        </Link>\r\n      </Col>\r\n      <Col sm={12}>\r\n        <hr />\r\n        <p className=''>\r\n          <BsFileText size='1.5rem' />\r\n          <span className='ml-2'>{exam.description}</span>\r\n        </p>\r\n      </Col>\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge, Row, Spinner } from 'react-bootstrap'\r\nimport { useParams } from 'react-router'\r\nimport ExamByCat from './component/examByCat'\r\n\r\nconst contentCenter = {\r\n  //styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '45vh',\r\n  left: '50%',\r\n  zIndex: '10000000000'\r\n}\r\n\r\nexport default function ExamListsByCatShower() {\r\n  const { id } = useParams()\r\n  let [name, idA] = [null, null]\r\n  if (id) [name, idA] = id.split('-')\r\n  const [exams, setExams] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/category/' + idA)\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setExams(response.data)\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false)\r\n        console.log(e)\r\n      })\r\n  }, [idA])\r\n  return (\r\n    <div className='mt-5'>\r\n      {loading && (\r\n        <Spinner\r\n          animation='grow'\r\n          role='status'\r\n          variant='dark'\r\n          style={contentCenter}\r\n        ></Spinner>\r\n      )}\r\n      <h2 className='text-center'>\r\n        <span className='mr-2'>Available Exams Under</span>\r\n        <Badge variant='warning'>{name}</Badge>\r\n      </h2>\r\n      {!loading && (\r\n        <p className='text-center text-danger'>\r\n          {exams.length < 1 && 'NO Exam is avaiable.'}\r\n        </p>\r\n      )}\r\n      <div className='d-flex justify-content-center'>\r\n        {exams.map((exam) => (\r\n          <Row\r\n            key={exam.title}\r\n            className='m-2 py-3 pl-2 bg-secondary text-white'\r\n            style={{ width: '350px' }}\r\n          >\r\n            <ExamByCat exam={exam} />\r\n          </Row>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}