{"version":3,"sources":["components/navbar/subNavBar.js","components/result/gist.js","components/result/stem.js","container/result/getFeedbacks.js","container/result/feedback.js","container/result/result.js"],"names":["connect","state","isAuthenticated","auth","token","props","pages","className","Item","as","to","pathname","toUpperCase","map","value","key","Gist","width","title","bgColor","style","minWidth","id","toLowerCase","defaultMessage","answerStatus","QTypeNumber","sbaStyle","stem","qIndex","index","qType","answer","qStem","aStem","isUntouched","color","size","Form","Check","inline","disabled","label","type","checked","marginRight","marginTop","name","GetFeedbacks","examId","useState","feedbacks","setFeedbacks","useEffect","axios","get","process","then","response","data","catch","e","console","log","ListGroup","feedback","fontSize","status","stars","i","push","getFeedbackStatus","feedbackStatus","message","validate","values","errors","email","test","validator","isLength","min","max","Feedback","res","setRes","user","useSelector","initialValues","firstName","Row","Col","lg","md","sm","enableReinitialize","onSubmit","setSubmitting","post","submit","touched","handleChange","handleSubmit","Group","controlId","Label","Control","placeholder","onChange","Text","classname","Input","isValid","defaultChecked","rows","Button","variant","duration","require","relativeTime","moment","QType","Result","this","exams","examResult","totalMark","totalScore","totalPenaltyMark","totalScorePercentage","timeTakenToComplete","error","Alert","Card","Header","Body","toFixed","humanize","item","result","stemResult","length","qText","stems","ind","fbStem","intl","formatMessage","Badge","generalFeedback","remarkPlugins","remarkGfm","rehypePlugins","rehypeRaw","components","table","node","children","Table","bordered","responsive","img","src","alt","Image","fluid","trim","Component","injectIntl"],"mappings":"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","file":"static/js/48.e978f950.chunk.js","sourcesContent":["import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst subNavBar = (props) => {\r\n  const pages = props.isAuthenticated\r\n    ? ['dashboard', 'courses', 'exams', 'logout', 'help']\r\n    : ['courses', 'exams', 'signup', 'login', 'help']\r\n\r\n  return (\r\n    <Nav className='bg-light'>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to={{ pathname: '/' }} className='nav-link link-hover'>\r\n          {'Home'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      {pages.map((value) => (\r\n        <Nav.Item key={value} as='li' className='mr-3'>\r\n          <NavLink\r\n            // href={\"/\" + value}\r\n            to={{ pathname: '/' + value }}\r\n            className='nav-link link-hover'\r\n          >\r\n            {value.toUpperCase()}\r\n          </NavLink>\r\n        </Nav.Item>\r\n      ))}\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to='/#contact' className='nav-link link-hover'>\r\n          {'Contact'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n    </Nav>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token !== null\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(subNavBar)\r\n","/* eslint-disable no-undef */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nexport default function Gist({ width = '67px', value, title, bgColor }) {\r\n  // eslint-disable-next-line no-console\r\n  return (\r\n    <div style={{ minWidth: width }} className='mr-2 mb-1'>\r\n      <p\r\n        className={bgColor + ' text-center text-light mb-1 p-3'}\r\n        // style={{ fontSize: '1.5rem' }}\r\n      >\r\n        {value}\r\n      </p>\r\n      <p\r\n        className={bgColor + ' bg-warning text-center text-light p-1'}\r\n        // style={{ fontSize: '1rem' }}\r\n      >\r\n        <FormattedMessage id={title.toLowerCase()} defaultMessage={title} />\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n  FaMinusCircle,\r\n  FaRegCheckCircle,\r\n  FaRegTimesCircle\r\n} from \"react-icons/fa\";\r\n\r\nconst answerStatus = {\r\n  True: 1,\r\n  False: 0,\r\n  NotAnswered: -1,\r\n};\r\n\r\nconst QTypeNumber = {\r\n  SingleBestAnswer: \"sba\",\r\n  Matrix: \"matrix\",\r\n};\r\n\r\nconst sbaStyle={\r\n  marginLeft: '2rem',\r\n  marginRight: '.6rem'\r\n}\r\n\r\nexport default function stem({qIndex, index, qType, answer, qStem, aStem,isUntouched }) {\r\n \r\n  return (\r\n    <div className=\"d-flex flex-nowrap\">\r\n      {qType === QTypeNumber.Matrix && (\r\n        <>\r\n          <div className=\"mr-2\">\r\n            {answer === answerStatus.True && (\r\n              <FaRegCheckCircle style={{ color: \"#3c763d\" }} size=\"1.4rem\" />\r\n            )}\r\n            {answer === answerStatus.False && (\r\n              <FaRegTimesCircle style={{ color: \"#a94442\" }} size=\"1.4rem\" />\r\n            )}\r\n            {answer === answerStatus.NotAnswered && (\r\n              <FaMinusCircle style={{ color: \"#777\" }} size=\"1.4rem\" />\r\n            )}\r\n          </div>\r\n          <div className=\"mr-2\">{qStem}</div>\r\n          {!isUntouched && <div>\r\n            <Form.Check\r\n              inline\r\n              disabled\r\n              label=\"true\"\r\n              type=\"radio\"\r\n              checked={\r\n                (answer !== answerStatus.NotAnswered) ?\r\n                answer === answerStatus.True ? aStem === \"1\" : aStem !== \"1\"\r\n                : false\r\n              }\r\n            />\r\n            <Form.Check\r\n              inline\r\n              disabled\r\n              label=\"False\"\r\n              type=\"radio\"\r\n              checked={\r\n                (answer !== answerStatus.NotAnswered)?\r\n                answer === answerStatus.True ? aStem === \"0\" : aStem !== \"0\"\r\n                : false\r\n              }\r\n            />\r\n\r\n          </div>}\r\n        </>\r\n      )}\r\n\r\n      {qType === QTypeNumber.SingleBestAnswer && (\r\n        <>\r\n\r\n          <div className=\"d-flex mr-2\">\r\n            <div className=\"\">\r\n              { answer[1] ?\r\n                  index + 1 === answer[1] ? \r\n                    answer[0] === answer[1] ?\r\n                      <FaRegCheckCircle style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }} size=\"1.2rem\" />\r\n                      : <FaRegTimesCircle style={{ color: \"#a94442\", marginRight: sbaStyle.marginRight }} size=\"1.2rem\" />\r\n                  : index + 1 === answer[0] ?\r\n                      <FaRegCheckCircle style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }} size=\"1.2rem\" />\r\n                      : <div style={{width: '2rem'}}></div>\r\n\r\n                : index + 1 === answer[0] ?\r\n                    <FaRegCheckCircle style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }} size=\"1.2rem\" />\r\n                    : <div style={{width: '2rem'}}></div>\r\n              }\r\n            </div>\r\n            <div style={{marginTop: '.2rem'}}>\r\n              {\r\n                answer[1] ?\r\n                  index +1 === answer[1] ?\r\n                    <Form.Check\r\n                    inline\r\n                    disabled\r\n                    type=\"radio\"\r\n                    name={qIndex}\r\n                    checked={true}\r\n                    />\r\n                    : <Form.Check\r\n                    inline\r\n                    disabled\r\n                    type=\"radio\"\r\n                    name={qIndex}\r\n                    checked={false}\r\n                    />\r\n                  : <Form.Check\r\n                  inline\r\n                  disabled\r\n                  type=\"radio\"\r\n                  name={qIndex}\r\n                  checked={false}\r\n                  />\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n\r\n          {/* <div className=\"mr-2\">\r\n            {!answer[1] && (index + 1 === answer[0] ? (\r\n              <div className=\"d-flex\">\r\n                <FaRegCheckCircle style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }} size=\"1.4rem\" />\r\n                <Form.Check\r\n                inline\r\n                disabled\r\n                type=\"radio\"\r\n                name={qIndex}\r\n                checked={false}\r\n                />\r\n              </div>\r\n            )\r\n          : (\r\n            <>\r\n              <Form.Check\r\n              inline\r\n              disabled\r\n              style={{marginLeft: sbaStyle.marginLeft}}\r\n              type=\"radio\"\r\n              name={qIndex}\r\n              checked={false}\r\n              />\r\n            </>)\r\n            )\r\n          \r\n          }\r\n            {answer[1] && ( (index + 1 === answer[1] ) ? \r\n                answer[0] === answer[1] ? (\r\n                  <div className=\"d-flex\">\r\n                    <FaCheckCircle\r\n                      style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }}\r\n                      size=\"1.4rem\"\r\n                    />\r\n                    <Form.Check\r\n                      inline\r\n                      disabled\r\n                      type=\"radio\"\r\n                      name={qIndex}\r\n                      checked={true}\r\n                      />\r\n                    </div>\r\n                  )\r\n              : (\r\n                <div className=\"d-flex\">\r\n                  <FaRegTimesCircle style={{ color: \"#a94442\", marginRight: sbaStyle.marginRight }} size=\"1.4rem\" />\r\n                  <Form.Check\r\n                    inline\r\n                    disabled\r\n                    type=\"radio\"\r\n                    name={qIndex}\r\n                    checked={true}\r\n                    />\r\n                </div>\r\n                )\r\n              :   ( index + 1 === answer[0]  ? (\r\n                <div className=\"d-flex\">\r\n                  <FaCheckCircle\r\n                    style={{ color: \"#3c763d\", marginRight: sbaStyle.marginRight }}\r\n                    size=\"1.4rem\"\r\n                  />\r\n                  <Form.Check\r\n                    inline\r\n                    disabled\r\n                    type=\"radio\"\r\n                    name={qIndex}\r\n                    checked={false}\r\n                    />\r\n                </div>\r\n              ) \r\n                  :  <Form.Check\r\n                  inline\r\n                  disabled\r\n                  style={{marginLeft: sbaStyle.marginLeft}}\r\n                  type=\"radio\"\r\n                  name={qIndex}\r\n                  checked={false}\r\n                  />             \r\n              )\r\n            )            \r\n            }\r\n          </div> */}\r\n          <div className=\"\">{qStem}</div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { FaStar, FaUserCircle } from 'react-icons/fa'\r\n\r\nexport default function GetFeedbacks({ examId }) {\r\n  const [feedbacks, setFeedbacks] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/feedback/' + examId)\r\n      .then((response) => {\r\n        setFeedbacks(response.data)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }, [examId])\r\n\r\n  return (\r\n    <div>\r\n      <h3>Review</h3>\r\n      <ListGroup as='ul'>\r\n        {feedbacks.map((feedback) => (\r\n          <ListGroup.Item as='li'>\r\n            <p className='p-3 bg-light'>\r\n              <span>\r\n                <FaUserCircle size='2.3rem' />\r\n              </span>\r\n              <br />\r\n              <span style={{ fontSize: '1.5rem' }}>{feedback.name}</span>\r\n              <hr />\r\n              <span>\r\n                reviewd as {getFeedbackStatus(feedback.feedbackStatus)}\r\n              </span>\r\n              <br />\r\n              <q className='p-5 text-muted'>{feedback.message}</q>\r\n            </p>\r\n          </ListGroup.Item>\r\n        ))}\r\n      </ListGroup>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction getFeedbackStatus(status) {\r\n  const stars = []\r\n  for (let i = 0; i < status; i++) {\r\n    stars.push(<FaStar size='1.1rem' color=' #FFD700' />)\r\n  }\r\n  return stars\r\n  // switch (status) {\r\n  //   case 1:\r\n  //     return 'Below Average'\r\n  //   case 2:\r\n  //     return 'Average'\r\n  //   case 4:\r\n  //     return 'Best'\r\n\r\n  //   default:\r\n  //     return 'Good'\r\n  // }\r\n}\r\n","import axios from 'axios'\r\nimport { Formik } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { FaLaughBeam, FaRegMeh, FaRegSadCry, FaRegSmile } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\nimport validator from 'validator'\r\nimport GetFeedbacks from './getFeedbacks'\r\n\r\nconst validate = (values) => {\r\n  const errors = {}\r\n  if (!values.email) {\r\n    errors.email = 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n\r\n  if (!values.name) {\r\n    errors.name = 'Required'\r\n  } else if (!validator.isLength(values.name, { min: 3, max: 30 })) {\r\n    errors.name = 'Name should be within 3 to 30 characters'\r\n  }\r\n  if (!validator.isLength(values.message, { min: 5, max: 255 })) {\r\n    errors.message = 'Message should be within 5 to 255 characters'\r\n  }\r\n  return errors\r\n}\r\nconst submit = (values, examId, setRes, { setSubmitting }) => {\r\n  axios\r\n    .post(process.env.REACT_APP_SITE_URL + '/exams/feedback', {\r\n      ...values,\r\n      examId\r\n    })\r\n    .then((response) => {\r\n      setRes(response.data)\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n    })\r\n}\r\n\r\nexport default function Feedback({ examId }) {\r\n  const [res, setRes] = useState(null)\r\n  const user = useSelector((state) => state.user)\r\n  const initialValues = {\r\n    name: user.firstName,\r\n    email: user.email,\r\n    feedbackStatus: '3',\r\n    message: ''\r\n  }\r\n\r\n  return (\r\n    <Row className='mt-5'>\r\n      <Col lg={4} md={5} sm={6}>\r\n        {res ? (\r\n          <h3 className='text-success'>Thank You for submitting a feedback.</h3>\r\n        ) : (\r\n          <>\r\n            <h3>Please give us a feedback.</h3>\r\n            <hr />\r\n            <Formik\r\n              enableReinitialize\r\n              initialValues={initialValues}\r\n              validate={validate}\r\n              onSubmit={(values, { setSubmitting }) => {\r\n                submit(values, examId, setRes, { setSubmitting })\r\n              }}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleSubmit\r\n                /* and other goodies */\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Form.Group controlId='formBasicName'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                      type='text'\r\n                      name='name'\r\n                      placeholder='Enter name'\r\n                      onChange={handleChange}\r\n                      value={values.name}\r\n                    />\r\n                    <Form.Text as='span' className='text-danger'>\r\n                      {errors.name && touched.name && errors.name}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n                  <Form.Group controlId='formBasicEmail'>\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control\r\n                      type='email'\r\n                      name='email'\r\n                      placeholder='Enter email'\r\n                      onChange={handleChange}\r\n                      value={values.email}\r\n                    />\r\n                    <Form.Text className='text-muted'>\r\n                      We'll never share your email with anyone else.\r\n                    </Form.Text>\r\n                    <Form.Text as='span' className='text-danger'>\r\n                      {errors.email && touched.email && errors.email}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n                  <p classname='lead'>Rating</p>\r\n                  <Form.Group\r\n                    controlId='formGroupFeedback'\r\n                    className='d-flex mb-4'\r\n                  >\r\n                    <Form.Check type='radio' className='mr-2'>\r\n                      <Form.Check.Input\r\n                        type='radio'\r\n                        name='feedbackStatus'\r\n                        isValid\r\n                        value='1'\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check.Label className='text-danger'>\r\n                        <FaRegSadCry />\r\n                        <span className='ml-1'>Below average</span>\r\n                      </Form.Check.Label>\r\n                    </Form.Check>\r\n                    <Form.Check type='radio' className='mr-2'>\r\n                      <Form.Check.Input\r\n                        type='radio'\r\n                        name='feedbackStatus'\r\n                        value='2'\r\n                        isValid\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check.Label className='text-warning'>\r\n                        <FaRegMeh />\r\n                        <span className='ml-1'>Average</span>\r\n                      </Form.Check.Label>\r\n                    </Form.Check>\r\n                    <Form.Check type='radio' className='mr-2'>\r\n                      <Form.Check.Input\r\n                        type='radio'\r\n                        name='feedbackStatus'\r\n                        value='3'\r\n                        isValid\r\n                        defaultChecked\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check.Label>\r\n                        <FaRegSmile />\r\n                        <span className='ml-1'>Good</span>\r\n                      </Form.Check.Label>\r\n                    </Form.Check>\r\n                    <Form.Check type='radio' className='mr-2'>\r\n                      <Form.Check.Input\r\n                        type='radio'\r\n                        name='feedbackStatus'\r\n                        value='4'\r\n                        isValid\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check.Label>\r\n                        <FaLaughBeam />\r\n                        <span className='ml-1'>Best</span>\r\n                      </Form.Check.Label>\r\n                    </Form.Check>\r\n                    <Form.Text as='span' className='text-danger'>\r\n                      {errors.feedbackStatus &&\r\n                        touched.feedbackStatus &&\r\n                        errors.feedbackStatus}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId='formBasicFeedback'>\r\n                    <Form.Label>Message</Form.Label>\r\n                    <Form.Control\r\n                      as='textarea'\r\n                      name='message'\r\n                      rows={3}\r\n                      placeholder='Write a feedback message for this exam'\r\n                      onChange={handleChange}\r\n                      value={values.message}\r\n                    />\r\n                    <Form.Text as='span' className='text-danger'>\r\n                      {errors.message && touched.message && errors.message}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n\r\n                  <Button variant='primary' type='submit'>\r\n                    Submit\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </>\r\n        )}\r\n      </Col>\r\n      <Col lg={8} md={7} sm={6}>\r\n        <GetFeedbacks examId={examId} />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","/* eslint-disable react/prop-types */\r\n//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { Component } from 'react'\r\nimport { Alert, Badge, Card, Image, ListGroup, Table } from 'react-bootstrap'\r\nimport { FaMinusCircle } from 'react-icons/fa'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport rehypeRaw from 'rehype-raw'\r\nimport { connect } from 'react-redux'\r\nimport remarkGfm from 'remark-gfm'\r\nimport SubNavBar from '../../components/navbar/subNavBar'\r\nimport Gist from '../../components/result/gist'\r\nimport QuestionResultStem from '../../components/result/stem'\r\nimport Feedback from './feedback'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nconst QType = {\r\n  SingleBestAnswer: 'sba',\r\n  Matrix: 'matrix'\r\n}\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    const {\r\n      examId,\r\n      examResult,\r\n      totalMark,\r\n      totalScore,\r\n      totalPenaltyMark,\r\n      totalScorePercentage,\r\n      // eslint-disable-next-line no-unused-vars\r\n      timeTakenToComplete,\r\n      error\r\n    } = this.props.exams\r\n\r\n    return (\r\n      <div>\r\n        {error && (\r\n          <>\r\n            <Alert variant={'danger'} className='m-5 text-center'>\r\n              {error}\r\n            </Alert>\r\n            <SubNavBar />\r\n          </>\r\n        )}\r\n        {examResult && (\r\n          <div className='mb-5'>\r\n            <Card className='mt-3'>\r\n              <Card.Header as='h5' className='text-center'>\r\n                <FormattedMessage id='result' defaultMessage='Result' />\r\n              </Card.Header>\r\n              <Card.Body className='d-flex justify-content-center flex-wrap'>\r\n                <Gist\r\n                  title='Score'\r\n                  bgColor='bg-warning'\r\n                  value={\r\n                    totalScore.toFixed(2) + ' (' + totalMark.toFixed(2) + ')'\r\n                  }\r\n                />\r\n                <Gist\r\n                  title='Time'\r\n                  bgColor='bg-info'\r\n                  value={moment\r\n                    .duration(timeTakenToComplete, 'minutes')\r\n                    .humanize()}\r\n                />\r\n                <Gist\r\n                  title='Percentage'\r\n                  bgColor='bg-primary'\r\n                  value={totalScorePercentage.toFixed(2) + ' %'}\r\n                />\r\n                <Gist\r\n                  title='Penalty Mark'\r\n                  bgColor='bg-secondary'\r\n                  value={totalPenaltyMark.toFixed(2)}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n\r\n            <Card className='mt-3'>\r\n              <Card.Header as='h5' className='text-center'>\r\n                <FormattedMessage id='detail' defaultMessage='Detail' />\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {examResult.map((item, index) => (\r\n                  <ListGroup key={index} variant='flush' className='mb-4'>\r\n                    <ListGroup.Item>\r\n                      {item.result.stemResult[0] === QType.Matrix &&\r\n                        item.result.stemResult.length === 1 && (\r\n                          <FaMinusCircle\r\n                            className='mr-2'\r\n                            style={{ color: '#777' }}\r\n                            size='1.4rem'\r\n                          />\r\n                        )}\r\n                      {item.result.stemResult[0] === QType.SingleBestAnswer &&\r\n                        item.result.stemResult.length === 2 && (\r\n                          <FaMinusCircle\r\n                            className='mr-2'\r\n                            style={{ color: '#777' }}\r\n                            size='1.4rem'\r\n                          />\r\n                        )}\r\n                      <span>{index + 1 + '. ' + item.qText}</span>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                      <div variant='flush' className='pl-3'>\r\n                        {item.stems.map((stem, ind) => {\r\n                          if (\r\n                            item.result.stemResult[0] === QType.SingleBestAnswer\r\n                          )\r\n                            return (\r\n                              <>\r\n                                <div className='mb-1'>\r\n                                  <QuestionResultStem\r\n                                    index={ind}\r\n                                    qType={item.result.stemResult[0]}\r\n                                    answer={[\r\n                                      item.result.stemResult[1],\r\n                                      item.result.stemResult[2]\r\n                                    ]}\r\n                                    qStem={`${ind + 1}. ${stem.qStem}`}\r\n                                  />\r\n                                </div>\r\n                                <div className='ml-3 mb-1'>\r\n                                  {stem.fbStem &&\r\n                                    this.props.intl.formatMessage({\r\n                                      id: 'explanation',\r\n                                      defaultMessage: 'Explanation is : '\r\n                                    }) +\r\n                                      ' ' +\r\n                                      stem.fbStem}\r\n                                </div>\r\n                              </>\r\n                            )\r\n                          else\r\n                            return (\r\n                              <>\r\n                                <div className='mb-1'>\r\n                                  <QuestionResultStem\r\n                                    qIndex={index}\r\n                                    index={ind}\r\n                                    qType={item.result.stemResult[0]}\r\n                                    answer={item.result.stemResult[ind + 1]}\r\n                                    qStem={`${ind + 1}. ${stem.qStem}`}\r\n                                    aStem={stem.aStem}\r\n                                    isUntouched={\r\n                                      item.result.stemResult.length === 1\r\n                                    }\r\n                                  />\r\n                                </div>\r\n\r\n                                <div\r\n                                  // className={\r\n                                  //   (item.result.stemResult[ind] === true\r\n                                  //     ? \"bg-success\"\r\n                                  //     : \"bg-danger\") + \" text-light ml-3\"\r\n                                  // }\r\n                                  className='mb-3'\r\n                                >\r\n                                  <Badge\r\n                                    variant='primary'\r\n                                    style={{ fontSize: '.8rem' }}\r\n                                  >\r\n                                    {' '}\r\n                                    This Statement is{' '}\r\n                                  </Badge>{' '}\r\n                                  {stem.aStem === '1' ? 'True' : 'False'}\r\n                                  <br />\r\n                                  {stem.fbStem && (\r\n                                    <>\r\n                                      <Badge\r\n                                        variant='info'\r\n                                        style={{ fontSize: '.8rem' }}\r\n                                      >\r\n                                        {this.props.intl.formatMessage({\r\n                                          id: 'explanation',\r\n                                          defaultMessage: 'Explanation is'\r\n                                        })}\r\n                                      </Badge>{' '}\r\n                                      <span>{' ' + stem.fbStem}</span>\r\n                                    </>\r\n                                  )}\r\n                                </div>\r\n                              </>\r\n                            )\r\n                        })}\r\n                      </div>\r\n                    </ListGroup.Item>\r\n                    {item.generalFeedback && (\r\n                      <ListGroup.Item className='ml-3 '>\r\n                        <p>\r\n                          <Badge\r\n                            variant='secondary'\r\n                            style={{ fontSize: '.8rem' }}\r\n                          >\r\n                            {this.props.intl.formatMessage({\r\n                              id: 'gexplanation',\r\n                              defaultMessage: 'General explanation is : '\r\n                            })}\r\n                          </Badge>\r\n                        </p>\r\n                        <ReactMarkdown\r\n                          remarkPlugins={[remarkGfm]}\r\n                          rehypePlugins={[rehypeRaw]}\r\n                          components={{\r\n                            table: ({ node, children, ...props }) => (\r\n                              <Table\r\n                                bordered\r\n                                responsive\r\n                                className='text-white w-50'\r\n                                children={children}\r\n                              />\r\n                            ),\r\n\r\n                            img: ({ node, src, alt, ...props }) => (\r\n                              <LazyLoadComponent>\r\n                                <Image src={src} alt={alt} width={350} fluid />\r\n                              </LazyLoadComponent>\r\n                            )\r\n                          }}\r\n                        >\r\n                          {item.generalFeedback.trim()}\r\n                        </ReactMarkdown>\r\n                      </ListGroup.Item>\r\n                    )}\r\n                  </ListGroup>\r\n                ))}\r\n              </Card.Body>\r\n            </Card>\r\n            <Feedback examId={examId} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams\r\n    //   auth: state.auth,\r\n    //   category: state.category,\r\n    //   api: state.api,\r\n  }\r\n}\r\n\r\nexport default injectIntl(connect(mapStateToProps)(Result))\r\n"],"sourceRoot":""}