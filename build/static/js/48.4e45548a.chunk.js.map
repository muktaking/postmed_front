{"version":3,"sources":["components/shared/spinner/spinner.js","utils/paginate.js","components/pagination/pagination.jsx","components/navbar/subNavBar.js","components/exams/paper/question/stem.jsx","components/exams/paper/question/question.jsx","container/exams/component/preExamNotification.js","container/exams/examTaker.js"],"names":["contentCenter","position","top","left","zIndex","SpinnerCustom","animation","role","variant","style","paginate","items","pageNumber","pageSize","startIndex","_","slice","take","value","pagination","itemsCount","onPageHandler","currentPage","pageCount","Math","ceil","number","push","Item","key","onClick","active","className","width","height","connect","state","isAuthenticated","auth","token","props","pages","as","to","pathname","toUpperCase","map","QuestionStemView","id","qType","stem","index","handleChange","defaultChecked","disableQuestions","useSelector","exams","Row","Col","xs","Form","Group","controlId","Check","type","Input","disabled","includes","name","onChange","Label","toString","QuestionForm","question","console","log","ListGroup","Badge","fontSize","qText","stems","PreExamNotification","examStartDialogueHandler","history","useHistory","useState","show","setShow","handleClose","Modal","onHide","Header","closeButton","Title","Body","questions","length","singleQuestionMark","timeLimit","totalPenaltyMark","Footer","Button","goBack","Completionist","renderer","hours","minutes","seconds","completed","ExamTaker","loading","date","Date","now","timeExpired","modalShow","arrowState","showPagination","examStartDialogue","timeTakenToComplete","answers","answerIds","Set","setState","modalHide","page","onHandleChange","e","target","onDisableQuestionsAddLoader","split","preState","add","onSwithchHandleChange","checked","onSubmitHandler","examId","match","params","courseId","forEach","find","o","free","onPostFreeExamByIdLoader","toFixed","questionIdsByOrder","onPostExamByIdLoader","this","onResetExamLoader","onGetExamByIdLoader","onGetFreeExamByIdLoader","Helmet","examResult","error","examError","onComplete","intl","formatMessage","defaultMessage","Alert","Switch","label","onTick","spy","smooth","offset","duration","size","lg","ind","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","prevPageText","nextPageText","Component","injectIntl","dispatch","getExamByIdLoader","getFreeExamByIdLoader","data","postExamByIdLoader","postFreeExamByIdLoader","resetExamError","disableQuestionsAdd","payload","withRouter"],"mappings":"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","file":"static/js/48.4e45548a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst contentCenter = {\r\n  //styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '45vh',\r\n  left: '50%',\r\n  zIndex: '10000000000'\r\n}\r\n\r\nexport default function SpinnerCustom() {\r\n  return (\r\n    <Spinner\r\n      animation='grow'\r\n      role='status'\r\n      variant='dark'\r\n      style={contentCenter}\r\n    ></Spinner>\r\n  )\r\n}\r\n","import _ from 'lodash'\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize\r\n  return _(items).slice(startIndex).take(pageSize).value()\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst pagination = ({ itemsCount, pageSize, onPageHandler, currentPage }) => {\r\n  const pageCount = Math.ceil(itemsCount / pageSize)\r\n  if (pageCount === 1) return null\r\n  const items = []\r\n  for (let number = 1; number <= pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        onClick={() => {\r\n          onPageHandler(number)\r\n        }}\r\n        active={number === currentPage}\r\n        className='my-2 mr-2 text-center'\r\n        style={{ width: '40px', height: '30px' }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    )\r\n  }\r\n  return (\r\n    <Pagination className='justify-content-start align-content-start flex-wrap'>\r\n      {items}\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default pagination\r\n","import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst subNavBar = (props) => {\r\n  const pages = props.isAuthenticated\r\n    ? ['dashboard', 'exams', 'logout']\r\n    : ['exams', 'signup', 'login']\r\n\r\n  return (\r\n    <Nav className='bg-light'>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to={{ pathname: '/' }} className='nav-link'>\r\n          {'Home'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to='/#contact' className='nav-link'>\r\n          {'Contact'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      {pages.map((value) => (\r\n        <Nav.Item key={value} as='li' className='mr-3'>\r\n          <NavLink\r\n            // href={\"/\" + value}\r\n            to={{ pathname: '/' + value }}\r\n            className='nav-link'\r\n          >\r\n            {value.toUpperCase()}\r\n          </NavLink>\r\n        </Nav.Item>\r\n      ))}\r\n      {/* </Scrollspy> */}\r\n    </Nav>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token !== null\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(subNavBar)\r\n","import React from 'react'\r\nimport { Col, Form, Row } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux'\r\nconst QuestionStemView = ({\r\n  id,\r\n  qType,\r\n  stem,\r\n  index,\r\n  handleChange,\r\n  defaultChecked\r\n}) => {\r\n  //const dispatch = useDispatch();\r\n  const disableQuestions = useSelector((state) => state.exams.disableQuestions)\r\n\r\n  // const disableQuestionsAddLoader = (name)=>{\r\n  //   dispatch({type: disableQuestionsAdd.type, payload: name})\r\n\r\n  return (\r\n    <Row className='px-md-4 px-xs-2'>\r\n      <Col xs='9'>{index + '. ' + stem}</Col>\r\n      <Form.Group as={Col} controlId='formGroupQuestionStemAnswer'>\r\n        {qType === 'matrix' ? (\r\n          <>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  disableQuestions &&\r\n                  disableQuestions.includes(id + '_' + index)\r\n                }\r\n                type='radio'\r\n                //label=\"True\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios1'\r\n                value={1}\r\n                defaultChecked={defaultChecked === '1'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>True</Form.Check.Label>\r\n            </Form.Check>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  disableQuestions &&\r\n                  disableQuestions.includes(id + '_' + index)\r\n                }\r\n                type='radio'\r\n                //label=\"False\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios2'\r\n                value={0}\r\n                defaultChecked={defaultChecked === '0'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>False</Form.Check.Label>\r\n            </Form.Check>\r\n          </>\r\n        ) : (\r\n          <Form.Check>\r\n            <Form.Check.Input\r\n              disabled={\r\n                disableQuestions && disableQuestions.includes(id.toString())\r\n              }\r\n              type='radio'\r\n              name={id}\r\n              id='formHorizontalRadios1'\r\n              value={index}\r\n              defaultChecked={defaultChecked == index}\r\n              onChange={handleChange}\r\n              className='mb-0'\r\n            />\r\n          </Form.Check>\r\n        )}\r\n      </Form.Group>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default QuestionStemView\r\n","import React from 'react'\r\nimport { Badge, ListGroup } from 'react-bootstrap'\r\nimport Stem from './stem'\r\n\r\nconst QuestionForm = ({ question, handleChange, defaultChecked, index }) => {\r\n  console.log(index)\r\n  return (\r\n    <ListGroup as='ul' className='mt-3'>\r\n      <ListGroup.Item as='li' active>\r\n        <Badge variant='danger p-1 mr-2' style={{ fontSize: '1rem' }}>\r\n          Question No. {index}\r\n        </Badge>\r\n        <span>{question.qText}</span>\r\n      </ListGroup.Item>\r\n\r\n      {question.stems.map((stem, index) => (\r\n        <ListGroup.Item as='li' key={index}>\r\n          <Stem\r\n            qType={question.qType}\r\n            stem={stem}\r\n            index={index + 1}\r\n            id={question.id}\r\n            handleChange={handleChange}\r\n            defaultChecked={\r\n              defaultChecked\r\n                ? question.qType === 'matrix'\r\n                  ? defaultChecked[index]\r\n                  : defaultChecked[0]\r\n                : null\r\n            }\r\n          />\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default QuestionForm\r\n","import React, { useState } from 'react'\r\nimport { Badge, Button, ListGroup, Modal } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router'\r\n\r\nexport default function PreExamNotification({\r\n  examStartDialogueHandler,\r\n  exams\r\n}) {\r\n  const history = useHistory()\r\n  const [show, setShow] = useState(true)\r\n  console.log(exams)\r\n  const handleClose = () => {\r\n    examStartDialogueHandler()\r\n    setShow(false)\r\n  }\r\n  return (\r\n    <div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Are You Sure to Proceed?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Exam's Rules</p>\r\n          {exams && (\r\n            <ListGroup>\r\n              <ListGroup.Item>\r\n                Total Questions:{' '}\r\n                <Badge>{exams.questions && exams.questions.length}</Badge>\r\n              </ListGroup.Item>\r\n              {/* <ListGroup.Item>\r\n              Single Question's Mark:{' '}\r\n              <Badge>\r\n                {exams.singleQuestionMark && exams.singleQuestionMark}\r\n              </Badge>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              Single Stem Mark:{' '}\r\n              <Badge>{exams.singleStemMark && exams.singleStemMark}</Badge>\r\n            </ListGroup.Item> */}\r\n              <ListGroup.Item>\r\n                Total Mark:{' '}\r\n                <Badge>\r\n                  {exams.questions &&\r\n                    exams.singleQuestionMark &&\r\n                    exams.questions.length * exams.singleQuestionMark}\r\n                </Badge>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                Time Limit: <Badge>{exams.timeLimit && exams.timeLimit}</Badge>{' '}\r\n                Mins\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                Penalty Mark:{' '}\r\n                <Badge>\r\n                  {exams.totalPenaltyMark && exams.totalPenaltyMark}\r\n                </Badge>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant='secondary'\r\n            onClick={() => {\r\n              history.goBack()\r\n            }}\r\n          >\r\n            Go Back\r\n          </Button>\r\n          <Button variant='primary' onClick={handleClose}>\r\n            Proceed\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Button,\r\n  Col, Form,\r\n  Modal,\r\n  Row\r\n} from \"react-bootstrap\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { FaRegArrowAltCircleDown, FaRegArrowAltCircleUp } from 'react-icons/fa';\r\nimport { injectIntl } from 'react-intl';\r\nimport Pagination from \"react-js-pagination\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Link as LinkScroll } from \"react-scroll\";\r\nimport QuestionView from \"../../components/exams/paper/question/question\";\r\nimport SubNavBar from \"../../components/navbar/subNavBar\";\r\nimport PaginationCustom from \"../../components/pagination/pagination\";\r\nimport Spinner from \"../../components/shared/spinner/spinner\";\r\nimport {\r\n  disableQuestionsAdd,\r\n  getExamByIdLoader,\r\n  getFreeExamByIdLoader,\r\n  postExamByIdLoader,\r\n  postFreeExamByIdLoader,\r\n  resetExamError\r\n} from \"../../store/exams\";\r\nimport { paginate } from \"../../utils/paginate\";\r\nimport PreExamNotification from \"./component/preExamNotification\";\r\n\r\n// Random component\r\nconst Completionist = () => (\r\n  <span className=\"text-danger\">Your Time is Finished</span>\r\n);\r\n\r\n// Renderer callback with condition\r\nconst renderer = ({ hours, minutes, seconds, completed }) => {\r\n  if (completed) {\r\n    // Render a completed state\r\n    return <Completionist />;\r\n  } else {\r\n    // Render a countdown\r\n    return (\r\n      <span>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {hours + \" H\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {minutes + \" M\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {seconds + \" S\"}\r\n        </Badge>\r\n      </span>\r\n    );\r\n  }\r\n};\r\n\r\nclass ExamTaker extends Component {\r\n  state = {\r\n    loading: false,\r\n    //For Pagination\r\n    pageSize: 1,\r\n    currentPage: 1,\r\n    //For Main Answer Sheet React CountDown\r\n    date: Date.now(),\r\n    //use in ending exam\r\n    timeExpired: false,\r\n    modalShow: false,\r\n    arrowState: true,\r\n    showPagination: true,\r\n    examStartDialogue: true,\r\n  };\r\n\r\n  timeTakenToComplete = 0;\r\n  answers = [];\r\n  answerIds = new Set();\r\n\r\n  modalShow = () => {\r\n    this.setState({ modalShow: true });\r\n  };\r\n  modalHide = () => {\r\n    this.setState({ modalShow: false });\r\n  };\r\n\r\n  examStartDialogueHandler = ()=>{\r\n    this.setState({ examStartDialogue: false });\r\n  }\r\n\r\n\r\n\r\n  //For paination\r\n  onPageHandler = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  onHandleChange = (e) => {\r\n        \r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    \r\n    this.props.onDisableQuestionsAddLoader(name);\r\n\r\n    if (name.includes(\"_\")) {\r\n      const [id, index] = name.split(\"_\");\r\n      this.setState((preState) => {\r\n        if (!preState[id]) preState[id] = [];\r\n        preState[id][index - 1] = value;\r\n        this.answerIds.add(id);\r\n      });\r\n    } else {\r\n      this.setState((preState) => {\r\n        preState[name] = [value];\r\n        this.answerIds.add(name);\r\n      });\r\n    }\r\n  };\r\n\r\n  onSwithchHandleChange = (e) => {\r\n    const checked = e.target.checked;\r\n    if(checked) {\r\n      this.setState({pageSize: this.props.exams.questions.length, currentPage: 1 , showPagination: false});\r\n    }\r\n    else{\r\n      this.setState({pageSize: 1, showPagination: true});\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  // for submitting Answer Sheet\r\n  onSubmitHandler = () => {\r\n    const examId = this.props.match.params.id.split('_')[0];\r\n    const courseId = this.props.match.params.id.split('_')[1]\r\n    this.setState({ loading: true });\r\n\r\n    this.answerIds.forEach((id) => {\r\n      this.answers.push({\r\n        id: id,\r\n        stems: this.state[id],\r\n        type: _.find(this.props.exams.questions, (o) => o.id === +id).qType,\r\n      });\r\n    });\r\n    if (this.props.free) {\r\n      this.props.onPostFreeExamByIdLoader({\r\n        examId,\r\n        timeTakenToComplete: (this.timeTakenToComplete / 60).toFixed(4),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    } else {\r\n      this.props.onPostExamByIdLoader({\r\n        examId,\r\n        courseId,\r\n        timeTakenToComplete: Math.ceil(this.timeTakenToComplete / 60).toFixed(\r\n          4\r\n        ),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onResetExamLoader();\r\n    if (this.props.auth.token) {\r\n      this.props.onGetExamByIdLoader(this.props.match.params.id);\r\n    } else {\r\n      this.props.onGetFreeExamByIdLoader(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const questions = paginate(\r\n      this.props.exams.questions,\r\n      this.state.currentPage,\r\n      this.state.pageSize\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>Exam- test your knowledge</title>\r\n        </Helmet>\r\n        {(this.props.exams.examResult || this.props.exams.error) && (\r\n          <Redirect to=\"/result\" />\r\n        )}\r\n\r\n        {(this.props.exams.questions.length < 1 && !this.props.exams.examError) && (\r\n          <Spinner />\r\n        )}\r\n\r\n        \r\n        {/* Modal tests are you want submit or time expired*/}\r\n        <Modal show={this.state.modalShow} onHide={this.modalHide}>\r\n          {this.state.loading ? \r\n\r\n          <p className=\"lead mt-5 text-center\">Your submitted Exam is processing...</p>\r\n          \r\n          : this.state.timeExpired ? (\r\n            <>\r\n              <Modal.Header>\r\n                <Modal.Title className=\"text-danger\">Time Expired</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">You will Taken To Result Page.</p>\r\n                  <Countdown\r\n                    date={Date.now() + 5 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">\r\n                    {this.props.intl.formatMessage({id: 'et.agree', defaultMessage: \"Are You Sure ? You will Taken To Result Page.\"})}\r\n                  </p>\r\n                  <Countdown\r\n                    date={Date.now() + 5 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.modalHide}>\r\n                {this.props.intl.formatMessage({id: 'et.no', defaultMessage: \"Go Back\"})}\r\n                  \r\n                </Button>\r\n                <Button variant=\"primary\" onClick={\r\n                  this.onSubmitHandler\r\n                  }>\r\n                {this.props.intl.formatMessage({id: 'et.yes', defaultMessage: \"Yes, I Want.\"})}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </>\r\n          )}\r\n        </Modal>\r\n        {this.props.exams.examError ? (\r\n          <>\r\n            <Alert variant=\"danger\" className=\"text-center mt-5\">\r\n              <h2>{this.props.exams.examError}</h2>\r\n              <h4>Possible Solution</h4>\r\n              <p>\r\n                You may not be logged in. So you can not participate exams other\r\n                than free. So login or participate free exam only.\r\n              </p>\r\n            </Alert>\r\n            <SubNavBar />\r\n          </>\r\n        ) :\r\n          this.props.exams.timeLimit && (\r\n            this.state.examStartDialogue ? <PreExamNotification exams={this.props.exams} examStartDialogueHandler={this.examStartDialogueHandler} /> :\r\n            // !window.confirm('Are You Sure.\\n Exam Rules: 1) For True-false based question select true or false for each stem. \\n 2) For multiple choice question, select the correct answer only.') ? this.props.history.goBack() :\r\n            \r\n            <>\r\n              <div className=\"text-dark text-center mt-1\" id=\"et-top\">\r\n                <Form.Switch\r\n                id=\"custom-switch\"\r\n                label={this.props.intl.formatMessage({id: 'btn.aqv', defaultMessage: \"Switch to All Questions View\"})}\r\n                className=\"mb-2\"\r\n                onChange={this.onSwithchHandleChange}\r\n                > \r\n\r\n                </Form.Switch>\r\n                <Countdown\r\n                  date={this.state.date + this.props.exams.timeLimit * 60 * 1000}\r\n                  renderer={renderer}\r\n                  onTick={() => {\r\n                    this.timeTakenToComplete++;\r\n                  }}\r\n                  onComplete={() => {\r\n                    this.setState({ timeExpired: true, modalShow: true });\r\n                  }}\r\n                />\r\n              </div>\r\n                          \r\n              <div className=\"scroll-container d-flex justify-content-center flex-wrap\">\r\n                <LinkScroll\r\n                  to={\"et-top\"}\r\n                  spy={true}\r\n                  smooth={true}\r\n                  offset={-50}\r\n                  duration={500}\r\n                >\r\n                  <FaRegArrowAltCircleUp size={\"1.2rem\"} />\r\n                  \r\n                </LinkScroll>\r\n\r\n                <LinkScroll\r\n                  to={\"qNavigator\"}\r\n                  spy={true}\r\n                  smooth={true}\r\n                  offset={-50}\r\n                  duration={500}\r\n                >\r\n                  <FaRegArrowAltCircleDown size={\"1.2rem\"}/>\r\n\r\n                </LinkScroll>\r\n              </div>\r\n              \r\n            <Row >  \r\n              <Col lg={9}>\r\n                {questions.map((question, ind) => (\r\n                  <QuestionView\r\n                    key={question.id}\r\n                    question={question}\r\n                    handleChange={this.onHandleChange}\r\n                    defaultChecked={\r\n                      this.state[question.id] ? this.state[question.id] : null\r\n                    }\r\n                    index={this.state.showPagination ? (this.state.currentPage * this.state.pageSize) : (ind + 1)}\r\n                  />\r\n                ))}\r\n                <div className=\"mt-2 d-flex justify-content-center\">\r\n                  {this.state.showPagination && <Pagination\r\n                    activePage={this.state.currentPage}\r\n                    itemsCountPerPage={1}\r\n                    totalItemsCount={this.props.exams.questions.length}\r\n                    pageRangeDisplayed={1}\r\n                    onChange={this.onPageHandler}\r\n                    itemClass=\"page-item\"\r\n                    linkClass=\"page-link\"\r\n                    prevPageText=\"Previous\"\r\n                    nextPageText=\"Next\"\r\n                  /> }\r\n                  <Button onClick={this.modalShow} className=\"mb-3 ml-5 btn-md\" id=\"qNavigator\">\r\n                  {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n              <Col lg={3} className=\"mt-3\">\r\n                {this.state.showPagination && <PaginationCustom\r\n                  itemsCount={this.props.exams.questions.length}\r\n                  pageSize={this.state.pageSize}\r\n                  currentPage={this.state.currentPage}\r\n                  onPageHandler={this.onPageHandler}\r\n                />}\r\n              </Col>\r\n          </Row>\r\n          </>\r\n          )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetExamByIdLoader: (id) => dispatch(getExamByIdLoader(id)),\r\n    onGetFreeExamByIdLoader: (id) => dispatch(getFreeExamByIdLoader(id)),\r\n    onPostExamByIdLoader: (data) => dispatch(postExamByIdLoader(data)),\r\n    onPostFreeExamByIdLoader: (data) => dispatch(postFreeExamByIdLoader(data)),\r\n    onResetExamLoader: () => dispatch({ type: resetExamError.type }),\r\n    onDisableQuestionsAddLoader: (name) => dispatch({type: disableQuestionsAdd.type, payload: name})\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams,\r\n    auth: state.auth,\r\n    //   category: state.category,\r\n    //   api: state.api,\r\n  };\r\n};\r\n\r\nexport default injectIntl(connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ExamTaker)));\r\n"],"sourceRoot":""}